/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fproject%2Fapp%2Fpage.js&server=false!":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fproject%2Fapp%2Fpage.js&server=false! ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.js */ \"(app-pages-browser)/./app/page.js\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZob21lJTJGcHJvamVjdCUyRmFwcCUyRnBhZ2UuanMmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2JlYTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvaG9tZS9wcm9qZWN0L2FwcC9wYWdlLmpzXCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fproject%2Fapp%2Fpage.js&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function() {\n    var e = {\n        675: function(e, r) {\n            \"use strict\";\n            r.byteLength = byteLength;\n            r.toByteArray = toByteArray;\n            r.fromByteArray = fromByteArray;\n            var t = [];\n            var f = [];\n            var n = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n            var i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n            for(var o = 0, u = i.length; o < u; ++o){\n                t[o] = i[o];\n                f[i.charCodeAt(o)] = o;\n            }\n            f[\"-\".charCodeAt(0)] = 62;\n            f[\"_\".charCodeAt(0)] = 63;\n            function getLens(e) {\n                var r = e.length;\n                if (r % 4 > 0) {\n                    throw new Error(\"Invalid string. Length must be a multiple of 4\");\n                }\n                var t = e.indexOf(\"=\");\n                if (t === -1) t = r;\n                var f = t === r ? 0 : 4 - t % 4;\n                return [\n                    t,\n                    f\n                ];\n            }\n            function byteLength(e) {\n                var r = getLens(e);\n                var t = r[0];\n                var f = r[1];\n                return (t + f) * 3 / 4 - f;\n            }\n            function _byteLength(e, r, t) {\n                return (r + t) * 3 / 4 - t;\n            }\n            function toByteArray(e) {\n                var r;\n                var t = getLens(e);\n                var i = t[0];\n                var o = t[1];\n                var u = new n(_byteLength(e, i, o));\n                var a = 0;\n                var s = o > 0 ? i - 4 : i;\n                var h;\n                for(h = 0; h < s; h += 4){\n                    r = f[e.charCodeAt(h)] << 18 | f[e.charCodeAt(h + 1)] << 12 | f[e.charCodeAt(h + 2)] << 6 | f[e.charCodeAt(h + 3)];\n                    u[a++] = r >> 16 & 255;\n                    u[a++] = r >> 8 & 255;\n                    u[a++] = r & 255;\n                }\n                if (o === 2) {\n                    r = f[e.charCodeAt(h)] << 2 | f[e.charCodeAt(h + 1)] >> 4;\n                    u[a++] = r & 255;\n                }\n                if (o === 1) {\n                    r = f[e.charCodeAt(h)] << 10 | f[e.charCodeAt(h + 1)] << 4 | f[e.charCodeAt(h + 2)] >> 2;\n                    u[a++] = r >> 8 & 255;\n                    u[a++] = r & 255;\n                }\n                return u;\n            }\n            function tripletToBase64(e) {\n                return t[e >> 18 & 63] + t[e >> 12 & 63] + t[e >> 6 & 63] + t[e & 63];\n            }\n            function encodeChunk(e, r, t) {\n                var f;\n                var n = [];\n                for(var i = r; i < t; i += 3){\n                    f = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (e[i + 2] & 255);\n                    n.push(tripletToBase64(f));\n                }\n                return n.join(\"\");\n            }\n            function fromByteArray(e) {\n                var r;\n                var f = e.length;\n                var n = f % 3;\n                var i = [];\n                var o = 16383;\n                for(var u = 0, a = f - n; u < a; u += o){\n                    i.push(encodeChunk(e, u, u + o > a ? a : u + o));\n                }\n                if (n === 1) {\n                    r = e[f - 1];\n                    i.push(t[r >> 2] + t[r << 4 & 63] + \"==\");\n                } else if (n === 2) {\n                    r = (e[f - 2] << 8) + e[f - 1];\n                    i.push(t[r >> 10] + t[r >> 4 & 63] + t[r << 2 & 63] + \"=\");\n                }\n                return i.join(\"\");\n            }\n        },\n        72: function(e, r, t) {\n            \"use strict\";\n            /*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ var f = t(675);\n            var n = t(783);\n            var i = typeof Symbol === \"function\" && typeof Symbol.for === \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n            r.Buffer = Buffer;\n            r.SlowBuffer = SlowBuffer;\n            r.INSPECT_MAX_BYTES = 50;\n            var o = 2147483647;\n            r.kMaxLength = o;\n            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n                console.error(\"This browser lacks typed array (Uint8Array) support which is required by \" + \"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n            }\n            function typedArraySupport() {\n                try {\n                    var e = new Uint8Array(1);\n                    var r = {\n                        foo: function() {\n                            return 42;\n                        }\n                    };\n                    Object.setPrototypeOf(r, Uint8Array.prototype);\n                    Object.setPrototypeOf(e, r);\n                    return e.foo() === 42;\n                } catch (e) {\n                    return false;\n                }\n            }\n            Object.defineProperty(Buffer.prototype, \"parent\", {\n                enumerable: true,\n                get: function() {\n                    if (!Buffer.isBuffer(this)) return undefined;\n                    return this.buffer;\n                }\n            });\n            Object.defineProperty(Buffer.prototype, \"offset\", {\n                enumerable: true,\n                get: function() {\n                    if (!Buffer.isBuffer(this)) return undefined;\n                    return this.byteOffset;\n                }\n            });\n            function createBuffer(e) {\n                if (e > o) {\n                    throw new RangeError('The value \"' + e + '\" is invalid for option \"size\"');\n                }\n                var r = new Uint8Array(e);\n                Object.setPrototypeOf(r, Buffer.prototype);\n                return r;\n            }\n            function Buffer(e, r, t) {\n                if (typeof e === \"number\") {\n                    if (typeof r === \"string\") {\n                        throw new TypeError('The \"string\" argument must be of type string. Received type number');\n                    }\n                    return allocUnsafe(e);\n                }\n                return from(e, r, t);\n            }\n            Buffer.poolSize = 8192;\n            function from(e, r, t) {\n                if (typeof e === \"string\") {\n                    return fromString(e, r);\n                }\n                if (ArrayBuffer.isView(e)) {\n                    return fromArrayLike(e);\n                }\n                if (e == null) {\n                    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof e);\n                }\n                if (isInstance(e, ArrayBuffer) || e && isInstance(e.buffer, ArrayBuffer)) {\n                    return fromArrayBuffer(e, r, t);\n                }\n                if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(e, SharedArrayBuffer) || e && isInstance(e.buffer, SharedArrayBuffer))) {\n                    return fromArrayBuffer(e, r, t);\n                }\n                if (typeof e === \"number\") {\n                    throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n                }\n                var f = e.valueOf && e.valueOf();\n                if (f != null && f !== e) {\n                    return Buffer.from(f, r, t);\n                }\n                var n = fromObject(e);\n                if (n) return n;\n                if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] === \"function\") {\n                    return Buffer.from(e[Symbol.toPrimitive](\"string\"), r, t);\n                }\n                throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof e);\n            }\n            Buffer.from = function(e, r, t) {\n                return from(e, r, t);\n            };\n            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n            Object.setPrototypeOf(Buffer, Uint8Array);\n            function assertSize(e) {\n                if (typeof e !== \"number\") {\n                    throw new TypeError('\"size\" argument must be of type number');\n                } else if (e < 0) {\n                    throw new RangeError('The value \"' + e + '\" is invalid for option \"size\"');\n                }\n            }\n            function alloc(e, r, t) {\n                assertSize(e);\n                if (e <= 0) {\n                    return createBuffer(e);\n                }\n                if (r !== undefined) {\n                    return typeof t === \"string\" ? createBuffer(e).fill(r, t) : createBuffer(e).fill(r);\n                }\n                return createBuffer(e);\n            }\n            Buffer.alloc = function(e, r, t) {\n                return alloc(e, r, t);\n            };\n            function allocUnsafe(e) {\n                assertSize(e);\n                return createBuffer(e < 0 ? 0 : checked(e) | 0);\n            }\n            Buffer.allocUnsafe = function(e) {\n                return allocUnsafe(e);\n            };\n            Buffer.allocUnsafeSlow = function(e) {\n                return allocUnsafe(e);\n            };\n            function fromString(e, r) {\n                if (typeof r !== \"string\" || r === \"\") {\n                    r = \"utf8\";\n                }\n                if (!Buffer.isEncoding(r)) {\n                    throw new TypeError(\"Unknown encoding: \" + r);\n                }\n                var t = byteLength(e, r) | 0;\n                var f = createBuffer(t);\n                var n = f.write(e, r);\n                if (n !== t) {\n                    f = f.slice(0, n);\n                }\n                return f;\n            }\n            function fromArrayLike(e) {\n                var r = e.length < 0 ? 0 : checked(e.length) | 0;\n                var t = createBuffer(r);\n                for(var f = 0; f < r; f += 1){\n                    t[f] = e[f] & 255;\n                }\n                return t;\n            }\n            function fromArrayBuffer(e, r, t) {\n                if (r < 0 || e.byteLength < r) {\n                    throw new RangeError('\"offset\" is outside of buffer bounds');\n                }\n                if (e.byteLength < r + (t || 0)) {\n                    throw new RangeError('\"length\" is outside of buffer bounds');\n                }\n                var f;\n                if (r === undefined && t === undefined) {\n                    f = new Uint8Array(e);\n                } else if (t === undefined) {\n                    f = new Uint8Array(e, r);\n                } else {\n                    f = new Uint8Array(e, r, t);\n                }\n                Object.setPrototypeOf(f, Buffer.prototype);\n                return f;\n            }\n            function fromObject(e) {\n                if (Buffer.isBuffer(e)) {\n                    var r = checked(e.length) | 0;\n                    var t = createBuffer(r);\n                    if (t.length === 0) {\n                        return t;\n                    }\n                    e.copy(t, 0, 0, r);\n                    return t;\n                }\n                if (e.length !== undefined) {\n                    if (typeof e.length !== \"number\" || numberIsNaN(e.length)) {\n                        return createBuffer(0);\n                    }\n                    return fromArrayLike(e);\n                }\n                if (e.type === \"Buffer\" && Array.isArray(e.data)) {\n                    return fromArrayLike(e.data);\n                }\n            }\n            function checked(e) {\n                if (e >= o) {\n                    throw new RangeError(\"Attempt to allocate Buffer larger than maximum \" + \"size: 0x\" + o.toString(16) + \" bytes\");\n                }\n                return e | 0;\n            }\n            function SlowBuffer(e) {\n                if (+e != e) {\n                    e = 0;\n                }\n                return Buffer.alloc(+e);\n            }\n            Buffer.isBuffer = function isBuffer(e) {\n                return e != null && e._isBuffer === true && e !== Buffer.prototype;\n            };\n            Buffer.compare = function compare(e, r) {\n                if (isInstance(e, Uint8Array)) e = Buffer.from(e, e.offset, e.byteLength);\n                if (isInstance(r, Uint8Array)) r = Buffer.from(r, r.offset, r.byteLength);\n                if (!Buffer.isBuffer(e) || !Buffer.isBuffer(r)) {\n                    throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n                }\n                if (e === r) return 0;\n                var t = e.length;\n                var f = r.length;\n                for(var n = 0, i = Math.min(t, f); n < i; ++n){\n                    if (e[n] !== r[n]) {\n                        t = e[n];\n                        f = r[n];\n                        break;\n                    }\n                }\n                if (t < f) return -1;\n                if (f < t) return 1;\n                return 0;\n            };\n            Buffer.isEncoding = function isEncoding(e) {\n                switch(String(e).toLowerCase()){\n                    case \"hex\":\n                    case \"utf8\":\n                    case \"utf-8\":\n                    case \"ascii\":\n                    case \"latin1\":\n                    case \"binary\":\n                    case \"base64\":\n                    case \"ucs2\":\n                    case \"ucs-2\":\n                    case \"utf16le\":\n                    case \"utf-16le\":\n                        return true;\n                    default:\n                        return false;\n                }\n            };\n            Buffer.concat = function concat(e, r) {\n                if (!Array.isArray(e)) {\n                    throw new TypeError('\"list\" argument must be an Array of Buffers');\n                }\n                if (e.length === 0) {\n                    return Buffer.alloc(0);\n                }\n                var t;\n                if (r === undefined) {\n                    r = 0;\n                    for(t = 0; t < e.length; ++t){\n                        r += e[t].length;\n                    }\n                }\n                var f = Buffer.allocUnsafe(r);\n                var n = 0;\n                for(t = 0; t < e.length; ++t){\n                    var i = e[t];\n                    if (isInstance(i, Uint8Array)) {\n                        i = Buffer.from(i);\n                    }\n                    if (!Buffer.isBuffer(i)) {\n                        throw new TypeError('\"list\" argument must be an Array of Buffers');\n                    }\n                    i.copy(f, n);\n                    n += i.length;\n                }\n                return f;\n            };\n            function byteLength(e, r) {\n                if (Buffer.isBuffer(e)) {\n                    return e.length;\n                }\n                if (ArrayBuffer.isView(e) || isInstance(e, ArrayBuffer)) {\n                    return e.byteLength;\n                }\n                if (typeof e !== \"string\") {\n                    throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + \"Received type \" + typeof e);\n                }\n                var t = e.length;\n                var f = arguments.length > 2 && arguments[2] === true;\n                if (!f && t === 0) return 0;\n                var n = false;\n                for(;;){\n                    switch(r){\n                        case \"ascii\":\n                        case \"latin1\":\n                        case \"binary\":\n                            return t;\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8ToBytes(e).length;\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return t * 2;\n                        case \"hex\":\n                            return t >>> 1;\n                        case \"base64\":\n                            return base64ToBytes(e).length;\n                        default:\n                            if (n) {\n                                return f ? -1 : utf8ToBytes(e).length;\n                            }\n                            r = (\"\" + r).toLowerCase();\n                            n = true;\n                    }\n                }\n            }\n            Buffer.byteLength = byteLength;\n            function slowToString(e, r, t) {\n                var f = false;\n                if (r === undefined || r < 0) {\n                    r = 0;\n                }\n                if (r > this.length) {\n                    return \"\";\n                }\n                if (t === undefined || t > this.length) {\n                    t = this.length;\n                }\n                if (t <= 0) {\n                    return \"\";\n                }\n                t >>>= 0;\n                r >>>= 0;\n                if (t <= r) {\n                    return \"\";\n                }\n                if (!e) e = \"utf8\";\n                while(true){\n                    switch(e){\n                        case \"hex\":\n                            return hexSlice(this, r, t);\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8Slice(this, r, t);\n                        case \"ascii\":\n                            return asciiSlice(this, r, t);\n                        case \"latin1\":\n                        case \"binary\":\n                            return latin1Slice(this, r, t);\n                        case \"base64\":\n                            return base64Slice(this, r, t);\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return utf16leSlice(this, r, t);\n                        default:\n                            if (f) throw new TypeError(\"Unknown encoding: \" + e);\n                            e = (e + \"\").toLowerCase();\n                            f = true;\n                    }\n                }\n            }\n            Buffer.prototype._isBuffer = true;\n            function swap(e, r, t) {\n                var f = e[r];\n                e[r] = e[t];\n                e[t] = f;\n            }\n            Buffer.prototype.swap16 = function swap16() {\n                var e = this.length;\n                if (e % 2 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n                }\n                for(var r = 0; r < e; r += 2){\n                    swap(this, r, r + 1);\n                }\n                return this;\n            };\n            Buffer.prototype.swap32 = function swap32() {\n                var e = this.length;\n                if (e % 4 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n                }\n                for(var r = 0; r < e; r += 4){\n                    swap(this, r, r + 3);\n                    swap(this, r + 1, r + 2);\n                }\n                return this;\n            };\n            Buffer.prototype.swap64 = function swap64() {\n                var e = this.length;\n                if (e % 8 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n                }\n                for(var r = 0; r < e; r += 8){\n                    swap(this, r, r + 7);\n                    swap(this, r + 1, r + 6);\n                    swap(this, r + 2, r + 5);\n                    swap(this, r + 3, r + 4);\n                }\n                return this;\n            };\n            Buffer.prototype.toString = function toString() {\n                var e = this.length;\n                if (e === 0) return \"\";\n                if (arguments.length === 0) return utf8Slice(this, 0, e);\n                return slowToString.apply(this, arguments);\n            };\n            Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n            Buffer.prototype.equals = function equals(e) {\n                if (!Buffer.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n                if (this === e) return true;\n                return Buffer.compare(this, e) === 0;\n            };\n            Buffer.prototype.inspect = function inspect() {\n                var e = \"\";\n                var t = r.INSPECT_MAX_BYTES;\n                e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim();\n                if (this.length > t) e += \" ... \";\n                return \"<Buffer \" + e + \">\";\n            };\n            if (i) {\n                Buffer.prototype[i] = Buffer.prototype.inspect;\n            }\n            Buffer.prototype.compare = function compare(e, r, t, f, n) {\n                if (isInstance(e, Uint8Array)) {\n                    e = Buffer.from(e, e.offset, e.byteLength);\n                }\n                if (!Buffer.isBuffer(e)) {\n                    throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + \"Received type \" + typeof e);\n                }\n                if (r === undefined) {\n                    r = 0;\n                }\n                if (t === undefined) {\n                    t = e ? e.length : 0;\n                }\n                if (f === undefined) {\n                    f = 0;\n                }\n                if (n === undefined) {\n                    n = this.length;\n                }\n                if (r < 0 || t > e.length || f < 0 || n > this.length) {\n                    throw new RangeError(\"out of range index\");\n                }\n                if (f >= n && r >= t) {\n                    return 0;\n                }\n                if (f >= n) {\n                    return -1;\n                }\n                if (r >= t) {\n                    return 1;\n                }\n                r >>>= 0;\n                t >>>= 0;\n                f >>>= 0;\n                n >>>= 0;\n                if (this === e) return 0;\n                var i = n - f;\n                var o = t - r;\n                var u = Math.min(i, o);\n                var a = this.slice(f, n);\n                var s = e.slice(r, t);\n                for(var h = 0; h < u; ++h){\n                    if (a[h] !== s[h]) {\n                        i = a[h];\n                        o = s[h];\n                        break;\n                    }\n                }\n                if (i < o) return -1;\n                if (o < i) return 1;\n                return 0;\n            };\n            function bidirectionalIndexOf(e, r, t, f, n) {\n                if (e.length === 0) return -1;\n                if (typeof t === \"string\") {\n                    f = t;\n                    t = 0;\n                } else if (t > 2147483647) {\n                    t = 2147483647;\n                } else if (t < -2147483648) {\n                    t = -2147483648;\n                }\n                t = +t;\n                if (numberIsNaN(t)) {\n                    t = n ? 0 : e.length - 1;\n                }\n                if (t < 0) t = e.length + t;\n                if (t >= e.length) {\n                    if (n) return -1;\n                    else t = e.length - 1;\n                } else if (t < 0) {\n                    if (n) t = 0;\n                    else return -1;\n                }\n                if (typeof r === \"string\") {\n                    r = Buffer.from(r, f);\n                }\n                if (Buffer.isBuffer(r)) {\n                    if (r.length === 0) {\n                        return -1;\n                    }\n                    return arrayIndexOf(e, r, t, f, n);\n                } else if (typeof r === \"number\") {\n                    r = r & 255;\n                    if (typeof Uint8Array.prototype.indexOf === \"function\") {\n                        if (n) {\n                            return Uint8Array.prototype.indexOf.call(e, r, t);\n                        } else {\n                            return Uint8Array.prototype.lastIndexOf.call(e, r, t);\n                        }\n                    }\n                    return arrayIndexOf(e, [\n                        r\n                    ], t, f, n);\n                }\n                throw new TypeError(\"val must be string, number or Buffer\");\n            }\n            function arrayIndexOf(e, r, t, f, n) {\n                var i = 1;\n                var o = e.length;\n                var u = r.length;\n                if (f !== undefined) {\n                    f = String(f).toLowerCase();\n                    if (f === \"ucs2\" || f === \"ucs-2\" || f === \"utf16le\" || f === \"utf-16le\") {\n                        if (e.length < 2 || r.length < 2) {\n                            return -1;\n                        }\n                        i = 2;\n                        o /= 2;\n                        u /= 2;\n                        t /= 2;\n                    }\n                }\n                function read(e, r) {\n                    if (i === 1) {\n                        return e[r];\n                    } else {\n                        return e.readUInt16BE(r * i);\n                    }\n                }\n                var a;\n                if (n) {\n                    var s = -1;\n                    for(a = t; a < o; a++){\n                        if (read(e, a) === read(r, s === -1 ? 0 : a - s)) {\n                            if (s === -1) s = a;\n                            if (a - s + 1 === u) return s * i;\n                        } else {\n                            if (s !== -1) a -= a - s;\n                            s = -1;\n                        }\n                    }\n                } else {\n                    if (t + u > o) t = o - u;\n                    for(a = t; a >= 0; a--){\n                        var h = true;\n                        for(var c = 0; c < u; c++){\n                            if (read(e, a + c) !== read(r, c)) {\n                                h = false;\n                                break;\n                            }\n                        }\n                        if (h) return a;\n                    }\n                }\n                return -1;\n            }\n            Buffer.prototype.includes = function includes(e, r, t) {\n                return this.indexOf(e, r, t) !== -1;\n            };\n            Buffer.prototype.indexOf = function indexOf(e, r, t) {\n                return bidirectionalIndexOf(this, e, r, t, true);\n            };\n            Buffer.prototype.lastIndexOf = function lastIndexOf(e, r, t) {\n                return bidirectionalIndexOf(this, e, r, t, false);\n            };\n            function hexWrite(e, r, t, f) {\n                t = Number(t) || 0;\n                var n = e.length - t;\n                if (!f) {\n                    f = n;\n                } else {\n                    f = Number(f);\n                    if (f > n) {\n                        f = n;\n                    }\n                }\n                var i = r.length;\n                if (f > i / 2) {\n                    f = i / 2;\n                }\n                for(var o = 0; o < f; ++o){\n                    var u = parseInt(r.substr(o * 2, 2), 16);\n                    if (numberIsNaN(u)) return o;\n                    e[t + o] = u;\n                }\n                return o;\n            }\n            function utf8Write(e, r, t, f) {\n                return blitBuffer(utf8ToBytes(r, e.length - t), e, t, f);\n            }\n            function asciiWrite(e, r, t, f) {\n                return blitBuffer(asciiToBytes(r), e, t, f);\n            }\n            function latin1Write(e, r, t, f) {\n                return asciiWrite(e, r, t, f);\n            }\n            function base64Write(e, r, t, f) {\n                return blitBuffer(base64ToBytes(r), e, t, f);\n            }\n            function ucs2Write(e, r, t, f) {\n                return blitBuffer(utf16leToBytes(r, e.length - t), e, t, f);\n            }\n            Buffer.prototype.write = function write(e, r, t, f) {\n                if (r === undefined) {\n                    f = \"utf8\";\n                    t = this.length;\n                    r = 0;\n                } else if (t === undefined && typeof r === \"string\") {\n                    f = r;\n                    t = this.length;\n                    r = 0;\n                } else if (isFinite(r)) {\n                    r = r >>> 0;\n                    if (isFinite(t)) {\n                        t = t >>> 0;\n                        if (f === undefined) f = \"utf8\";\n                    } else {\n                        f = t;\n                        t = undefined;\n                    }\n                } else {\n                    throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n                }\n                var n = this.length - r;\n                if (t === undefined || t > n) t = n;\n                if (e.length > 0 && (t < 0 || r < 0) || r > this.length) {\n                    throw new RangeError(\"Attempt to write outside buffer bounds\");\n                }\n                if (!f) f = \"utf8\";\n                var i = false;\n                for(;;){\n                    switch(f){\n                        case \"hex\":\n                            return hexWrite(this, e, r, t);\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8Write(this, e, r, t);\n                        case \"ascii\":\n                            return asciiWrite(this, e, r, t);\n                        case \"latin1\":\n                        case \"binary\":\n                            return latin1Write(this, e, r, t);\n                        case \"base64\":\n                            return base64Write(this, e, r, t);\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return ucs2Write(this, e, r, t);\n                        default:\n                            if (i) throw new TypeError(\"Unknown encoding: \" + f);\n                            f = (\"\" + f).toLowerCase();\n                            i = true;\n                    }\n                }\n            };\n            Buffer.prototype.toJSON = function toJSON() {\n                return {\n                    type: \"Buffer\",\n                    data: Array.prototype.slice.call(this._arr || this, 0)\n                };\n            };\n            function base64Slice(e, r, t) {\n                if (r === 0 && t === e.length) {\n                    return f.fromByteArray(e);\n                } else {\n                    return f.fromByteArray(e.slice(r, t));\n                }\n            }\n            function utf8Slice(e, r, t) {\n                t = Math.min(e.length, t);\n                var f = [];\n                var n = r;\n                while(n < t){\n                    var i = e[n];\n                    var o = null;\n                    var u = i > 239 ? 4 : i > 223 ? 3 : i > 191 ? 2 : 1;\n                    if (n + u <= t) {\n                        var a, s, h, c;\n                        switch(u){\n                            case 1:\n                                if (i < 128) {\n                                    o = i;\n                                }\n                                break;\n                            case 2:\n                                a = e[n + 1];\n                                if ((a & 192) === 128) {\n                                    c = (i & 31) << 6 | a & 63;\n                                    if (c > 127) {\n                                        o = c;\n                                    }\n                                }\n                                break;\n                            case 3:\n                                a = e[n + 1];\n                                s = e[n + 2];\n                                if ((a & 192) === 128 && (s & 192) === 128) {\n                                    c = (i & 15) << 12 | (a & 63) << 6 | s & 63;\n                                    if (c > 2047 && (c < 55296 || c > 57343)) {\n                                        o = c;\n                                    }\n                                }\n                                break;\n                            case 4:\n                                a = e[n + 1];\n                                s = e[n + 2];\n                                h = e[n + 3];\n                                if ((a & 192) === 128 && (s & 192) === 128 && (h & 192) === 128) {\n                                    c = (i & 15) << 18 | (a & 63) << 12 | (s & 63) << 6 | h & 63;\n                                    if (c > 65535 && c < 1114112) {\n                                        o = c;\n                                    }\n                                }\n                        }\n                    }\n                    if (o === null) {\n                        o = 65533;\n                        u = 1;\n                    } else if (o > 65535) {\n                        o -= 65536;\n                        f.push(o >>> 10 & 1023 | 55296);\n                        o = 56320 | o & 1023;\n                    }\n                    f.push(o);\n                    n += u;\n                }\n                return decodeCodePointsArray(f);\n            }\n            var u = 4096;\n            function decodeCodePointsArray(e) {\n                var r = e.length;\n                if (r <= u) {\n                    return String.fromCharCode.apply(String, e);\n                }\n                var t = \"\";\n                var f = 0;\n                while(f < r){\n                    t += String.fromCharCode.apply(String, e.slice(f, f += u));\n                }\n                return t;\n            }\n            function asciiSlice(e, r, t) {\n                var f = \"\";\n                t = Math.min(e.length, t);\n                for(var n = r; n < t; ++n){\n                    f += String.fromCharCode(e[n] & 127);\n                }\n                return f;\n            }\n            function latin1Slice(e, r, t) {\n                var f = \"\";\n                t = Math.min(e.length, t);\n                for(var n = r; n < t; ++n){\n                    f += String.fromCharCode(e[n]);\n                }\n                return f;\n            }\n            function hexSlice(e, r, t) {\n                var f = e.length;\n                if (!r || r < 0) r = 0;\n                if (!t || t < 0 || t > f) t = f;\n                var n = \"\";\n                for(var i = r; i < t; ++i){\n                    n += s[e[i]];\n                }\n                return n;\n            }\n            function utf16leSlice(e, r, t) {\n                var f = e.slice(r, t);\n                var n = \"\";\n                for(var i = 0; i < f.length; i += 2){\n                    n += String.fromCharCode(f[i] + f[i + 1] * 256);\n                }\n                return n;\n            }\n            Buffer.prototype.slice = function slice(e, r) {\n                var t = this.length;\n                e = ~~e;\n                r = r === undefined ? t : ~~r;\n                if (e < 0) {\n                    e += t;\n                    if (e < 0) e = 0;\n                } else if (e > t) {\n                    e = t;\n                }\n                if (r < 0) {\n                    r += t;\n                    if (r < 0) r = 0;\n                } else if (r > t) {\n                    r = t;\n                }\n                if (r < e) r = e;\n                var f = this.subarray(e, r);\n                Object.setPrototypeOf(f, Buffer.prototype);\n                return f;\n            };\n            function checkOffset(e, r, t) {\n                if (e % 1 !== 0 || e < 0) throw new RangeError(\"offset is not uint\");\n                if (e + r > t) throw new RangeError(\"Trying to access beyond buffer length\");\n            }\n            Buffer.prototype.readUIntLE = function readUIntLE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = this[e];\n                var n = 1;\n                var i = 0;\n                while(++i < r && (n *= 256)){\n                    f += this[e + i] * n;\n                }\n                return f;\n            };\n            Buffer.prototype.readUIntBE = function readUIntBE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) {\n                    checkOffset(e, r, this.length);\n                }\n                var f = this[e + --r];\n                var n = 1;\n                while(r > 0 && (n *= 256)){\n                    f += this[e + --r] * n;\n                }\n                return f;\n            };\n            Buffer.prototype.readUInt8 = function readUInt8(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 1, this.length);\n                return this[e];\n            };\n            Buffer.prototype.readUInt16LE = function readUInt16LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                return this[e] | this[e + 1] << 8;\n            };\n            Buffer.prototype.readUInt16BE = function readUInt16BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                return this[e] << 8 | this[e + 1];\n            };\n            Buffer.prototype.readUInt32LE = function readUInt32LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n            };\n            Buffer.prototype.readUInt32BE = function readUInt32BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n            };\n            Buffer.prototype.readIntLE = function readIntLE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = this[e];\n                var n = 1;\n                var i = 0;\n                while(++i < r && (n *= 256)){\n                    f += this[e + i] * n;\n                }\n                n *= 128;\n                if (f >= n) f -= Math.pow(2, 8 * r);\n                return f;\n            };\n            Buffer.prototype.readIntBE = function readIntBE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = r;\n                var n = 1;\n                var i = this[e + --f];\n                while(f > 0 && (n *= 256)){\n                    i += this[e + --f] * n;\n                }\n                n *= 128;\n                if (i >= n) i -= Math.pow(2, 8 * r);\n                return i;\n            };\n            Buffer.prototype.readInt8 = function readInt8(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 1, this.length);\n                if (!(this[e] & 128)) return this[e];\n                return (255 - this[e] + 1) * -1;\n            };\n            Buffer.prototype.readInt16LE = function readInt16LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                var t = this[e] | this[e + 1] << 8;\n                return t & 32768 ? t | 4294901760 : t;\n            };\n            Buffer.prototype.readInt16BE = function readInt16BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                var t = this[e + 1] | this[e] << 8;\n                return t & 32768 ? t | 4294901760 : t;\n            };\n            Buffer.prototype.readInt32LE = function readInt32LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n            };\n            Buffer.prototype.readInt32BE = function readInt32BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n            };\n            Buffer.prototype.readFloatLE = function readFloatLE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return n.read(this, e, true, 23, 4);\n            };\n            Buffer.prototype.readFloatBE = function readFloatBE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return n.read(this, e, false, 23, 4);\n            };\n            Buffer.prototype.readDoubleLE = function readDoubleLE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 8, this.length);\n                return n.read(this, e, true, 52, 8);\n            };\n            Buffer.prototype.readDoubleBE = function readDoubleBE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 8, this.length);\n                return n.read(this, e, false, 52, 8);\n            };\n            function checkInt(e, r, t, f, n, i) {\n                if (!Buffer.isBuffer(e)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n                if (r > n || r < i) throw new RangeError('\"value\" argument is out of bounds');\n                if (t + f > e.length) throw new RangeError(\"Index out of range\");\n            }\n            Buffer.prototype.writeUIntLE = function writeUIntLE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                t = t >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t) - 1;\n                    checkInt(this, e, r, t, n, 0);\n                }\n                var i = 1;\n                var o = 0;\n                this[r] = e & 255;\n                while(++o < t && (i *= 256)){\n                    this[r + o] = e / i & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeUIntBE = function writeUIntBE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                t = t >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t) - 1;\n                    checkInt(this, e, r, t, n, 0);\n                }\n                var i = t - 1;\n                var o = 1;\n                this[r + i] = e & 255;\n                while(--i >= 0 && (o *= 256)){\n                    this[r + i] = e / o & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeUInt8 = function writeUInt8(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 1, 255, 0);\n                this[r] = e & 255;\n                return r + 1;\n            };\n            Buffer.prototype.writeUInt16LE = function writeUInt16LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 65535, 0);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                return r + 2;\n            };\n            Buffer.prototype.writeUInt16BE = function writeUInt16BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 65535, 0);\n                this[r] = e >>> 8;\n                this[r + 1] = e & 255;\n                return r + 2;\n            };\n            Buffer.prototype.writeUInt32LE = function writeUInt32LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 4294967295, 0);\n                this[r + 3] = e >>> 24;\n                this[r + 2] = e >>> 16;\n                this[r + 1] = e >>> 8;\n                this[r] = e & 255;\n                return r + 4;\n            };\n            Buffer.prototype.writeUInt32BE = function writeUInt32BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 4294967295, 0);\n                this[r] = e >>> 24;\n                this[r + 1] = e >>> 16;\n                this[r + 2] = e >>> 8;\n                this[r + 3] = e & 255;\n                return r + 4;\n            };\n            Buffer.prototype.writeIntLE = function writeIntLE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t - 1);\n                    checkInt(this, e, r, t, n - 1, -n);\n                }\n                var i = 0;\n                var o = 1;\n                var u = 0;\n                this[r] = e & 255;\n                while(++i < t && (o *= 256)){\n                    if (e < 0 && u === 0 && this[r + i - 1] !== 0) {\n                        u = 1;\n                    }\n                    this[r + i] = (e / o >> 0) - u & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeIntBE = function writeIntBE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t - 1);\n                    checkInt(this, e, r, t, n - 1, -n);\n                }\n                var i = t - 1;\n                var o = 1;\n                var u = 0;\n                this[r + i] = e & 255;\n                while(--i >= 0 && (o *= 256)){\n                    if (e < 0 && u === 0 && this[r + i + 1] !== 0) {\n                        u = 1;\n                    }\n                    this[r + i] = (e / o >> 0) - u & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeInt8 = function writeInt8(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 1, 127, -128);\n                if (e < 0) e = 255 + e + 1;\n                this[r] = e & 255;\n                return r + 1;\n            };\n            Buffer.prototype.writeInt16LE = function writeInt16LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 32767, -32768);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                return r + 2;\n            };\n            Buffer.prototype.writeInt16BE = function writeInt16BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 32767, -32768);\n                this[r] = e >>> 8;\n                this[r + 1] = e & 255;\n                return r + 2;\n            };\n            Buffer.prototype.writeInt32LE = function writeInt32LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                this[r + 2] = e >>> 16;\n                this[r + 3] = e >>> 24;\n                return r + 4;\n            };\n            Buffer.prototype.writeInt32BE = function writeInt32BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);\n                if (e < 0) e = 4294967295 + e + 1;\n                this[r] = e >>> 24;\n                this[r + 1] = e >>> 16;\n                this[r + 2] = e >>> 8;\n                this[r + 3] = e & 255;\n                return r + 4;\n            };\n            function checkIEEE754(e, r, t, f, n, i) {\n                if (t + f > e.length) throw new RangeError(\"Index out of range\");\n                if (t < 0) throw new RangeError(\"Index out of range\");\n            }\n            function writeFloat(e, r, t, f, i) {\n                r = +r;\n                t = t >>> 0;\n                if (!i) {\n                    checkIEEE754(e, r, t, 4, 34028234663852886e22, -34028234663852886e22);\n                }\n                n.write(e, r, t, f, 23, 4);\n                return t + 4;\n            }\n            Buffer.prototype.writeFloatLE = function writeFloatLE(e, r, t) {\n                return writeFloat(this, e, r, true, t);\n            };\n            Buffer.prototype.writeFloatBE = function writeFloatBE(e, r, t) {\n                return writeFloat(this, e, r, false, t);\n            };\n            function writeDouble(e, r, t, f, i) {\n                r = +r;\n                t = t >>> 0;\n                if (!i) {\n                    checkIEEE754(e, r, t, 8, 17976931348623157e292, -17976931348623157e292);\n                }\n                n.write(e, r, t, f, 52, 8);\n                return t + 8;\n            }\n            Buffer.prototype.writeDoubleLE = function writeDoubleLE(e, r, t) {\n                return writeDouble(this, e, r, true, t);\n            };\n            Buffer.prototype.writeDoubleBE = function writeDoubleBE(e, r, t) {\n                return writeDouble(this, e, r, false, t);\n            };\n            Buffer.prototype.copy = function copy(e, r, t, f) {\n                if (!Buffer.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n                if (!t) t = 0;\n                if (!f && f !== 0) f = this.length;\n                if (r >= e.length) r = e.length;\n                if (!r) r = 0;\n                if (f > 0 && f < t) f = t;\n                if (f === t) return 0;\n                if (e.length === 0 || this.length === 0) return 0;\n                if (r < 0) {\n                    throw new RangeError(\"targetStart out of bounds\");\n                }\n                if (t < 0 || t >= this.length) throw new RangeError(\"Index out of range\");\n                if (f < 0) throw new RangeError(\"sourceEnd out of bounds\");\n                if (f > this.length) f = this.length;\n                if (e.length - r < f - t) {\n                    f = e.length - r + t;\n                }\n                var n = f - t;\n                if (this === e && typeof Uint8Array.prototype.copyWithin === \"function\") {\n                    this.copyWithin(r, t, f);\n                } else if (this === e && t < r && r < f) {\n                    for(var i = n - 1; i >= 0; --i){\n                        e[i + r] = this[i + t];\n                    }\n                } else {\n                    Uint8Array.prototype.set.call(e, this.subarray(t, f), r);\n                }\n                return n;\n            };\n            Buffer.prototype.fill = function fill(e, r, t, f) {\n                if (typeof e === \"string\") {\n                    if (typeof r === \"string\") {\n                        f = r;\n                        r = 0;\n                        t = this.length;\n                    } else if (typeof t === \"string\") {\n                        f = t;\n                        t = this.length;\n                    }\n                    if (f !== undefined && typeof f !== \"string\") {\n                        throw new TypeError(\"encoding must be a string\");\n                    }\n                    if (typeof f === \"string\" && !Buffer.isEncoding(f)) {\n                        throw new TypeError(\"Unknown encoding: \" + f);\n                    }\n                    if (e.length === 1) {\n                        var n = e.charCodeAt(0);\n                        if (f === \"utf8\" && n < 128 || f === \"latin1\") {\n                            e = n;\n                        }\n                    }\n                } else if (typeof e === \"number\") {\n                    e = e & 255;\n                } else if (typeof e === \"boolean\") {\n                    e = Number(e);\n                }\n                if (r < 0 || this.length < r || this.length < t) {\n                    throw new RangeError(\"Out of range index\");\n                }\n                if (t <= r) {\n                    return this;\n                }\n                r = r >>> 0;\n                t = t === undefined ? this.length : t >>> 0;\n                if (!e) e = 0;\n                var i;\n                if (typeof e === \"number\") {\n                    for(i = r; i < t; ++i){\n                        this[i] = e;\n                    }\n                } else {\n                    var o = Buffer.isBuffer(e) ? e : Buffer.from(e, f);\n                    var u = o.length;\n                    if (u === 0) {\n                        throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n                    }\n                    for(i = 0; i < t - r; ++i){\n                        this[i + r] = o[i % u];\n                    }\n                }\n                return this;\n            };\n            var a = /[^+/0-9A-Za-z-_]/g;\n            function base64clean(e) {\n                e = e.split(\"=\")[0];\n                e = e.trim().replace(a, \"\");\n                if (e.length < 2) return \"\";\n                while(e.length % 4 !== 0){\n                    e = e + \"=\";\n                }\n                return e;\n            }\n            function utf8ToBytes(e, r) {\n                r = r || Infinity;\n                var t;\n                var f = e.length;\n                var n = null;\n                var i = [];\n                for(var o = 0; o < f; ++o){\n                    t = e.charCodeAt(o);\n                    if (t > 55295 && t < 57344) {\n                        if (!n) {\n                            if (t > 56319) {\n                                if ((r -= 3) > -1) i.push(239, 191, 189);\n                                continue;\n                            } else if (o + 1 === f) {\n                                if ((r -= 3) > -1) i.push(239, 191, 189);\n                                continue;\n                            }\n                            n = t;\n                            continue;\n                        }\n                        if (t < 56320) {\n                            if ((r -= 3) > -1) i.push(239, 191, 189);\n                            n = t;\n                            continue;\n                        }\n                        t = (n - 55296 << 10 | t - 56320) + 65536;\n                    } else if (n) {\n                        if ((r -= 3) > -1) i.push(239, 191, 189);\n                    }\n                    n = null;\n                    if (t < 128) {\n                        if ((r -= 1) < 0) break;\n                        i.push(t);\n                    } else if (t < 2048) {\n                        if ((r -= 2) < 0) break;\n                        i.push(t >> 6 | 192, t & 63 | 128);\n                    } else if (t < 65536) {\n                        if ((r -= 3) < 0) break;\n                        i.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n                    } else if (t < 1114112) {\n                        if ((r -= 4) < 0) break;\n                        i.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n                    } else {\n                        throw new Error(\"Invalid code point\");\n                    }\n                }\n                return i;\n            }\n            function asciiToBytes(e) {\n                var r = [];\n                for(var t = 0; t < e.length; ++t){\n                    r.push(e.charCodeAt(t) & 255);\n                }\n                return r;\n            }\n            function utf16leToBytes(e, r) {\n                var t, f, n;\n                var i = [];\n                for(var o = 0; o < e.length; ++o){\n                    if ((r -= 2) < 0) break;\n                    t = e.charCodeAt(o);\n                    f = t >> 8;\n                    n = t % 256;\n                    i.push(n);\n                    i.push(f);\n                }\n                return i;\n            }\n            function base64ToBytes(e) {\n                return f.toByteArray(base64clean(e));\n            }\n            function blitBuffer(e, r, t, f) {\n                for(var n = 0; n < f; ++n){\n                    if (n + t >= r.length || n >= e.length) break;\n                    r[n + t] = e[n];\n                }\n                return n;\n            }\n            function isInstance(e, r) {\n                return e instanceof r || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === r.name;\n            }\n            function numberIsNaN(e) {\n                return e !== e;\n            }\n            var s = function() {\n                var e = \"0123456789abcdef\";\n                var r = new Array(256);\n                for(var t = 0; t < 16; ++t){\n                    var f = t * 16;\n                    for(var n = 0; n < 16; ++n){\n                        r[f + n] = e[t] + e[n];\n                    }\n                }\n                return r;\n            }();\n        },\n        783: function(e, r) {\n            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ r.read = function(e, r, t, f, n) {\n                var i, o;\n                var u = n * 8 - f - 1;\n                var a = (1 << u) - 1;\n                var s = a >> 1;\n                var h = -7;\n                var c = t ? n - 1 : 0;\n                var l = t ? -1 : 1;\n                var p = e[r + c];\n                c += l;\n                i = p & (1 << -h) - 1;\n                p >>= -h;\n                h += u;\n                for(; h > 0; i = i * 256 + e[r + c], c += l, h -= 8){}\n                o = i & (1 << -h) - 1;\n                i >>= -h;\n                h += f;\n                for(; h > 0; o = o * 256 + e[r + c], c += l, h -= 8){}\n                if (i === 0) {\n                    i = 1 - s;\n                } else if (i === a) {\n                    return o ? NaN : (p ? -1 : 1) * Infinity;\n                } else {\n                    o = o + Math.pow(2, f);\n                    i = i - s;\n                }\n                return (p ? -1 : 1) * o * Math.pow(2, i - f);\n            };\n            r.write = function(e, r, t, f, n, i) {\n                var o, u, a;\n                var s = i * 8 - n - 1;\n                var h = (1 << s) - 1;\n                var c = h >> 1;\n                var l = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n                var p = f ? 0 : i - 1;\n                var y = f ? 1 : -1;\n                var g = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;\n                r = Math.abs(r);\n                if (isNaN(r) || r === Infinity) {\n                    u = isNaN(r) ? 1 : 0;\n                    o = h;\n                } else {\n                    o = Math.floor(Math.log(r) / Math.LN2);\n                    if (r * (a = Math.pow(2, -o)) < 1) {\n                        o--;\n                        a *= 2;\n                    }\n                    if (o + c >= 1) {\n                        r += l / a;\n                    } else {\n                        r += l * Math.pow(2, 1 - c);\n                    }\n                    if (r * a >= 2) {\n                        o++;\n                        a /= 2;\n                    }\n                    if (o + c >= h) {\n                        u = 0;\n                        o = h;\n                    } else if (o + c >= 1) {\n                        u = (r * a - 1) * Math.pow(2, n);\n                        o = o + c;\n                    } else {\n                        u = r * Math.pow(2, c - 1) * Math.pow(2, n);\n                        o = 0;\n                    }\n                }\n                for(; n >= 8; e[t + p] = u & 255, p += y, u /= 256, n -= 8){}\n                o = o << n | u;\n                s += n;\n                for(; s > 0; e[t + p] = o & 255, p += y, o /= 256, s -= 8){}\n                e[t + p - y] |= g * 128;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var f = r[t];\n        if (f !== undefined) {\n            return f.exports;\n        }\n        var n = r[t] = {\n            exports: {}\n        };\n        var i = true;\n        try {\n            e[t](n, n.exports, __nccwpck_require__);\n            i = false;\n        } finally{\n            if (i) delete r[t];\n        }\n        return n.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(72);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvYnVmZmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQztJQUFXLElBQUlBLElBQUU7UUFBQyxLQUFJLFNBQVNBLENBQUMsRUFBQ0MsQ0FBQztZQUFFO1lBQWFBLEVBQUVDLFVBQVUsR0FBQ0E7WUFBV0QsRUFBRUUsV0FBVyxHQUFDQTtZQUFZRixFQUFFRyxhQUFhLEdBQUNBO1lBQWMsSUFBSUMsSUFBRSxFQUFFO1lBQUMsSUFBSUMsSUFBRSxFQUFFO1lBQUMsSUFBSUMsSUFBRSxPQUFPQyxlQUFhLGNBQVlBLGFBQVdDO1lBQU0sSUFBSUMsSUFBRTtZQUFtRSxJQUFJLElBQUlDLElBQUUsR0FBRUMsSUFBRUYsRUFBRUcsTUFBTSxFQUFDRixJQUFFQyxHQUFFLEVBQUVELEVBQUU7Z0JBQUNOLENBQUMsQ0FBQ00sRUFBRSxHQUFDRCxDQUFDLENBQUNDLEVBQUU7Z0JBQUNMLENBQUMsQ0FBQ0ksRUFBRUksVUFBVSxDQUFDSCxHQUFHLEdBQUNBO1lBQUM7WUFBQ0wsQ0FBQyxDQUFDLElBQUlRLFVBQVUsQ0FBQyxHQUFHLEdBQUM7WUFBR1IsQ0FBQyxDQUFDLElBQUlRLFVBQVUsQ0FBQyxHQUFHLEdBQUM7WUFBRyxTQUFTQyxRQUFRZixDQUFDO2dCQUFFLElBQUlDLElBQUVELEVBQUVhLE1BQU07Z0JBQUMsSUFBR1osSUFBRSxJQUFFLEdBQUU7b0JBQUMsTUFBTSxJQUFJZSxNQUFNO2dCQUFpRDtnQkFBQyxJQUFJWCxJQUFFTCxFQUFFaUIsT0FBTyxDQUFDO2dCQUFLLElBQUdaLE1BQUksQ0FBQyxHQUFFQSxJQUFFSjtnQkFBRSxJQUFJSyxJQUFFRCxNQUFJSixJQUFFLElBQUUsSUFBRUksSUFBRTtnQkFBRSxPQUFNO29CQUFDQTtvQkFBRUM7aUJBQUU7WUFBQTtZQUFDLFNBQVNKLFdBQVdGLENBQUM7Z0JBQUUsSUFBSUMsSUFBRWMsUUFBUWY7Z0JBQUcsSUFBSUssSUFB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SUFBQztJQUFFLElBQUl0TCxJQUFFLENBQUM7SUFBRSxTQUFTNEwsb0JBQW9CeEwsQ0FBQztRQUFFLElBQUlDLElBQUVMLENBQUMsQ0FBQ0ksRUFBRTtRQUFDLElBQUdDLE1BQUlzQyxXQUFVO1lBQUMsT0FBT3RDLEVBQUV3TCxPQUFPO1FBQUE7UUFBQyxJQUFJdkwsSUFBRU4sQ0FBQyxDQUFDSSxFQUFFLEdBQUM7WUFBQ3lMLFNBQVEsQ0FBQztRQUFDO1FBQUUsSUFBSXBMLElBQUU7UUFBSyxJQUFHO1lBQUNWLENBQUMsQ0FBQ0ssRUFBRSxDQUFDRSxHQUFFQSxFQUFFdUwsT0FBTyxFQUFDRDtZQUFxQm5MLElBQUU7UUFBSyxTQUFRO1lBQUMsSUFBR0EsR0FBRSxPQUFPVCxDQUFDLENBQUNJLEVBQUU7UUFBQTtRQUFDLE9BQU9FLEVBQUV1TCxPQUFPO0lBQUE7SUFBQyxJQUFHLE9BQU9ELHdCQUFzQixhQUFZQSxvQkFBb0JFLEVBQUUsR0FBQ0MsU0FBU0EsR0FBQztJQUFJLElBQUkzTCxJQUFFd0wsb0JBQW9CO0lBQUlJLE9BQU9ILE9BQU8sR0FBQ3pMO0FBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9idWZmZXIvaW5kZXguanM/Mzc3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17Njc1OmZ1bmN0aW9uKGUscil7XCJ1c2Ugc3RyaWN0XCI7ci5ieXRlTGVuZ3RoPWJ5dGVMZW5ndGg7ci50b0J5dGVBcnJheT10b0J5dGVBcnJheTtyLmZyb21CeXRlQXJyYXk9ZnJvbUJ5dGVBcnJheTt2YXIgdD1bXTt2YXIgZj1bXTt2YXIgbj10eXBlb2YgVWludDhBcnJheSE9PVwidW5kZWZpbmVkXCI/VWludDhBcnJheTpBcnJheTt2YXIgaT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtmb3IodmFyIG89MCx1PWkubGVuZ3RoO288dTsrK28pe3Rbb109aVtvXTtmW2kuY2hhckNvZGVBdChvKV09b31mW1wiLVwiLmNoYXJDb2RlQXQoMCldPTYyO2ZbXCJfXCIuY2hhckNvZGVBdCgwKV09NjM7ZnVuY3Rpb24gZ2V0TGVucyhlKXt2YXIgcj1lLmxlbmd0aDtpZihyJTQ+MCl7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKX12YXIgdD1lLmluZGV4T2YoXCI9XCIpO2lmKHQ9PT0tMSl0PXI7dmFyIGY9dD09PXI/MDo0LXQlNDtyZXR1cm5bdCxmXX1mdW5jdGlvbiBieXRlTGVuZ3RoKGUpe3ZhciByPWdldExlbnMoZSk7dmFyIHQ9clswXTt2YXIgZj1yWzFdO3JldHVybih0K2YpKjMvNC1mfWZ1bmN0aW9uIF9ieXRlTGVuZ3RoKGUscix0KXtyZXR1cm4ocit0KSozLzQtdH1mdW5jdGlvbiB0b0J5dGVBcnJheShlKXt2YXIgcjt2YXIgdD1nZXRMZW5zKGUpO3ZhciBpPXRbMF07dmFyIG89dFsxXTt2YXIgdT1uZXcgbihfYnl0ZUxlbmd0aChlLGksbykpO3ZhciBhPTA7dmFyIHM9bz4wP2ktNDppO3ZhciBoO2ZvcihoPTA7aDxzO2grPTQpe3I9ZltlLmNoYXJDb2RlQXQoaCldPDwxOHxmW2UuY2hhckNvZGVBdChoKzEpXTw8MTJ8ZltlLmNoYXJDb2RlQXQoaCsyKV08PDZ8ZltlLmNoYXJDb2RlQXQoaCszKV07dVthKytdPXI+PjE2JjI1NTt1W2ErK109cj4+OCYyNTU7dVthKytdPXImMjU1fWlmKG89PT0yKXtyPWZbZS5jaGFyQ29kZUF0KGgpXTw8MnxmW2UuY2hhckNvZGVBdChoKzEpXT4+NDt1W2ErK109ciYyNTV9aWYobz09PTEpe3I9ZltlLmNoYXJDb2RlQXQoaCldPDwxMHxmW2UuY2hhckNvZGVBdChoKzEpXTw8NHxmW2UuY2hhckNvZGVBdChoKzIpXT4+Mjt1W2ErK109cj4+OCYyNTU7dVthKytdPXImMjU1fXJldHVybiB1fWZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NChlKXtyZXR1cm4gdFtlPj4xOCY2M10rdFtlPj4xMiY2M10rdFtlPj42JjYzXSt0W2UmNjNdfWZ1bmN0aW9uIGVuY29kZUNodW5rKGUscix0KXt2YXIgZjt2YXIgbj1bXTtmb3IodmFyIGk9cjtpPHQ7aSs9Myl7Zj0oZVtpXTw8MTYmMTY3MTE2ODApKyhlW2krMV08PDgmNjUyODApKyhlW2krMl0mMjU1KTtuLnB1c2godHJpcGxldFRvQmFzZTY0KGYpKX1yZXR1cm4gbi5qb2luKFwiXCIpfWZ1bmN0aW9uIGZyb21CeXRlQXJyYXkoZSl7dmFyIHI7dmFyIGY9ZS5sZW5ndGg7dmFyIG49ZiUzO3ZhciBpPVtdO3ZhciBvPTE2MzgzO2Zvcih2YXIgdT0wLGE9Zi1uO3U8YTt1Kz1vKXtpLnB1c2goZW5jb2RlQ2h1bmsoZSx1LHUrbz5hP2E6dStvKSl9aWYobj09PTEpe3I9ZVtmLTFdO2kucHVzaCh0W3I+PjJdK3Rbcjw8NCY2M10rXCI9PVwiKX1lbHNlIGlmKG49PT0yKXtyPShlW2YtMl08PDgpK2VbZi0xXTtpLnB1c2godFtyPj4xMF0rdFtyPj40JjYzXSt0W3I8PDImNjNdK1wiPVwiKX1yZXR1cm4gaS5qb2luKFwiXCIpfX0sNzI6ZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovdmFyIGY9dCg2NzUpO3ZhciBuPXQoNzgzKTt2YXIgaT10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLmZvcj09PVwiZnVuY3Rpb25cIj9TeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIik6bnVsbDtyLkJ1ZmZlcj1CdWZmZXI7ci5TbG93QnVmZmVyPVNsb3dCdWZmZXI7ci5JTlNQRUNUX01BWF9CWVRFUz01MDt2YXIgbz0yMTQ3NDgzNjQ3O3Iua01heExlbmd0aD1vO0J1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUPXR5cGVkQXJyYXlTdXBwb3J0KCk7aWYoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUJiZ0eXBlb2YgY29uc29sZSE9PVwidW5kZWZpbmVkXCImJnR5cGVvZiBjb25zb2xlLmVycm9yPT09XCJmdW5jdGlvblwiKXtjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5IFwiK1wiYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC5cIil9ZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQoKXt0cnl7dmFyIGU9bmV3IFVpbnQ4QXJyYXkoMSk7dmFyIHI9e2ZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19O09iamVjdC5zZXRQcm90b3R5cGVPZihyLFVpbnQ4QXJyYXkucHJvdG90eXBlKTtPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxyKTtyZXR1cm4gZS5mb28oKT09PTQyfWNhdGNoKGUpe3JldHVybiBmYWxzZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsXCJwYXJlbnRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe2lmKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpcmV0dXJuIHVuZGVmaW5lZDtyZXR1cm4gdGhpcy5idWZmZXJ9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsXCJvZmZzZXRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe2lmKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpcmV0dXJuIHVuZGVmaW5lZDtyZXR1cm4gdGhpcy5ieXRlT2Zmc2V0fX0pO2Z1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihlKXtpZihlPm8pe3Rocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK2UrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpfXZhciByPW5ldyBVaW50OEFycmF5KGUpO09iamVjdC5zZXRQcm90b3R5cGVPZihyLEJ1ZmZlci5wcm90b3R5cGUpO3JldHVybiByfWZ1bmN0aW9uIEJ1ZmZlcihlLHIsdCl7aWYodHlwZW9mIGU9PT1cIm51bWJlclwiKXtpZih0eXBlb2Ygcj09PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyl9cmV0dXJuIGFsbG9jVW5zYWZlKGUpfXJldHVybiBmcm9tKGUscix0KX1CdWZmZXIucG9vbFNpemU9ODE5MjtmdW5jdGlvbiBmcm9tKGUscix0KXtpZih0eXBlb2YgZT09PVwic3RyaW5nXCIpe3JldHVybiBmcm9tU3RyaW5nKGUscil9aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXtyZXR1cm4gZnJvbUFycmF5TGlrZShlKX1pZihlPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgXCIrXCJvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgZSl9aWYoaXNJbnN0YW5jZShlLEFycmF5QnVmZmVyKXx8ZSYmaXNJbnN0YW5jZShlLmJ1ZmZlcixBcnJheUJ1ZmZlcikpe3JldHVybiBmcm9tQXJyYXlCdWZmZXIoZSxyLHQpfWlmKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciE9PVwidW5kZWZpbmVkXCImJihpc0luc3RhbmNlKGUsU2hhcmVkQXJyYXlCdWZmZXIpfHxlJiZpc0luc3RhbmNlKGUuYnVmZmVyLFNoYXJlZEFycmF5QnVmZmVyKSkpe3JldHVybiBmcm9tQXJyYXlCdWZmZXIoZSxyLHQpfWlmKHR5cGVvZiBlPT09XCJudW1iZXJcIil7dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKX12YXIgZj1lLnZhbHVlT2YmJmUudmFsdWVPZigpO2lmKGYhPW51bGwmJmYhPT1lKXtyZXR1cm4gQnVmZmVyLmZyb20oZixyLHQpfXZhciBuPWZyb21PYmplY3QoZSk7aWYobilyZXR1cm4gbjtpZih0eXBlb2YgU3ltYm9sIT09XCJ1bmRlZmluZWRcIiYmU3ltYm9sLnRvUHJpbWl0aXZlIT1udWxsJiZ0eXBlb2YgZVtTeW1ib2wudG9QcmltaXRpdmVdPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gQnVmZmVyLmZyb20oZVtTeW1ib2wudG9QcmltaXRpdmVdKFwic3RyaW5nXCIpLHIsdCl9dGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIFwiK1wib3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIGUpfUJ1ZmZlci5mcm9tPWZ1bmN0aW9uKGUscix0KXtyZXR1cm4gZnJvbShlLHIsdCl9O09iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLFVpbnQ4QXJyYXkucHJvdG90eXBlKTtPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLFVpbnQ4QXJyYXkpO2Z1bmN0aW9uIGFzc2VydFNpemUoZSl7aWYodHlwZW9mIGUhPT1cIm51bWJlclwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJyl9ZWxzZSBpZihlPDApe3Rocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK2UrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpfX1mdW5jdGlvbiBhbGxvYyhlLHIsdCl7YXNzZXJ0U2l6ZShlKTtpZihlPD0wKXtyZXR1cm4gY3JlYXRlQnVmZmVyKGUpfWlmKHIhPT11bmRlZmluZWQpe3JldHVybiB0eXBlb2YgdD09PVwic3RyaW5nXCI/Y3JlYXRlQnVmZmVyKGUpLmZpbGwocix0KTpjcmVhdGVCdWZmZXIoZSkuZmlsbChyKX1yZXR1cm4gY3JlYXRlQnVmZmVyKGUpfUJ1ZmZlci5hbGxvYz1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIGFsbG9jKGUscix0KX07ZnVuY3Rpb24gYWxsb2NVbnNhZmUoZSl7YXNzZXJ0U2l6ZShlKTtyZXR1cm4gY3JlYXRlQnVmZmVyKGU8MD8wOmNoZWNrZWQoZSl8MCl9QnVmZmVyLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKGUpe3JldHVybiBhbGxvY1Vuc2FmZShlKX07QnVmZmVyLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gYWxsb2NVbnNhZmUoZSl9O2Z1bmN0aW9uIGZyb21TdHJpbmcoZSxyKXtpZih0eXBlb2YgciE9PVwic3RyaW5nXCJ8fHI9PT1cIlwiKXtyPVwidXRmOFwifWlmKCFCdWZmZXIuaXNFbmNvZGluZyhyKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3IpfXZhciB0PWJ5dGVMZW5ndGgoZSxyKXwwO3ZhciBmPWNyZWF0ZUJ1ZmZlcih0KTt2YXIgbj1mLndyaXRlKGUscik7aWYobiE9PXQpe2Y9Zi5zbGljZSgwLG4pfXJldHVybiBmfWZ1bmN0aW9uIGZyb21BcnJheUxpa2UoZSl7dmFyIHI9ZS5sZW5ndGg8MD8wOmNoZWNrZWQoZS5sZW5ndGgpfDA7dmFyIHQ9Y3JlYXRlQnVmZmVyKHIpO2Zvcih2YXIgZj0wO2Y8cjtmKz0xKXt0W2ZdPWVbZl0mMjU1fXJldHVybiB0fWZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlcihlLHIsdCl7aWYocjwwfHxlLmJ5dGVMZW5ndGg8cil7dGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyl9aWYoZS5ieXRlTGVuZ3RoPHIrKHR8fDApKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKX12YXIgZjtpZihyPT09dW5kZWZpbmVkJiZ0PT09dW5kZWZpbmVkKXtmPW5ldyBVaW50OEFycmF5KGUpfWVsc2UgaWYodD09PXVuZGVmaW5lZCl7Zj1uZXcgVWludDhBcnJheShlLHIpfWVsc2V7Zj1uZXcgVWludDhBcnJheShlLHIsdCl9T2JqZWN0LnNldFByb3RvdHlwZU9mKGYsQnVmZmVyLnByb3RvdHlwZSk7cmV0dXJuIGZ9ZnVuY3Rpb24gZnJvbU9iamVjdChlKXtpZihCdWZmZXIuaXNCdWZmZXIoZSkpe3ZhciByPWNoZWNrZWQoZS5sZW5ndGgpfDA7dmFyIHQ9Y3JlYXRlQnVmZmVyKHIpO2lmKHQubGVuZ3RoPT09MCl7cmV0dXJuIHR9ZS5jb3B5KHQsMCwwLHIpO3JldHVybiB0fWlmKGUubGVuZ3RoIT09dW5kZWZpbmVkKXtpZih0eXBlb2YgZS5sZW5ndGghPT1cIm51bWJlclwifHxudW1iZXJJc05hTihlLmxlbmd0aCkpe3JldHVybiBjcmVhdGVCdWZmZXIoMCl9cmV0dXJuIGZyb21BcnJheUxpa2UoZSl9aWYoZS50eXBlPT09XCJCdWZmZXJcIiYmQXJyYXkuaXNBcnJheShlLmRhdGEpKXtyZXR1cm4gZnJvbUFycmF5TGlrZShlLmRhdGEpfX1mdW5jdGlvbiBjaGVja2VkKGUpe2lmKGU+PW8pe3Rocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBcIitcInNpemU6IDB4XCIrby50b1N0cmluZygxNikrXCIgYnl0ZXNcIil9cmV0dXJuIGV8MH1mdW5jdGlvbiBTbG93QnVmZmVyKGUpe2lmKCtlIT1lKXtlPTB9cmV0dXJuIEJ1ZmZlci5hbGxvYygrZSl9QnVmZmVyLmlzQnVmZmVyPWZ1bmN0aW9uIGlzQnVmZmVyKGUpe3JldHVybiBlIT1udWxsJiZlLl9pc0J1ZmZlcj09PXRydWUmJmUhPT1CdWZmZXIucHJvdG90eXBlfTtCdWZmZXIuY29tcGFyZT1mdW5jdGlvbiBjb21wYXJlKGUscil7aWYoaXNJbnN0YW5jZShlLFVpbnQ4QXJyYXkpKWU9QnVmZmVyLmZyb20oZSxlLm9mZnNldCxlLmJ5dGVMZW5ndGgpO2lmKGlzSW5zdGFuY2UocixVaW50OEFycmF5KSlyPUJ1ZmZlci5mcm9tKHIsci5vZmZzZXQsci5ieXRlTGVuZ3RoKTtpZighQnVmZmVyLmlzQnVmZmVyKGUpfHwhQnVmZmVyLmlzQnVmZmVyKHIpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5Jyl9aWYoZT09PXIpcmV0dXJuIDA7dmFyIHQ9ZS5sZW5ndGg7dmFyIGY9ci5sZW5ndGg7Zm9yKHZhciBuPTAsaT1NYXRoLm1pbih0LGYpO248aTsrK24pe2lmKGVbbl0hPT1yW25dKXt0PWVbbl07Zj1yW25dO2JyZWFrfX1pZih0PGYpcmV0dXJuLTE7aWYoZjx0KXJldHVybiAxO3JldHVybiAwfTtCdWZmZXIuaXNFbmNvZGluZz1mdW5jdGlvbiBpc0VuY29kaW5nKGUpe3N3aXRjaChTdHJpbmcoZSkudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gdHJ1ZTtkZWZhdWx0OnJldHVybiBmYWxzZX19O0J1ZmZlci5jb25jYXQ9ZnVuY3Rpb24gY29uY2F0KGUscil7aWYoIUFycmF5LmlzQXJyYXkoZSkpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpfWlmKGUubGVuZ3RoPT09MCl7cmV0dXJuIEJ1ZmZlci5hbGxvYygwKX12YXIgdDtpZihyPT09dW5kZWZpbmVkKXtyPTA7Zm9yKHQ9MDt0PGUubGVuZ3RoOysrdCl7cis9ZVt0XS5sZW5ndGh9fXZhciBmPUJ1ZmZlci5hbGxvY1Vuc2FmZShyKTt2YXIgbj0wO2Zvcih0PTA7dDxlLmxlbmd0aDsrK3Qpe3ZhciBpPWVbdF07aWYoaXNJbnN0YW5jZShpLFVpbnQ4QXJyYXkpKXtpPUJ1ZmZlci5mcm9tKGkpfWlmKCFCdWZmZXIuaXNCdWZmZXIoaSkpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpfWkuY29weShmLG4pO24rPWkubGVuZ3RofXJldHVybiBmfTtmdW5jdGlvbiBieXRlTGVuZ3RoKGUscil7aWYoQnVmZmVyLmlzQnVmZmVyKGUpKXtyZXR1cm4gZS5sZW5ndGh9aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpfHxpc0luc3RhbmNlKGUsQXJyYXlCdWZmZXIpKXtyZXR1cm4gZS5ieXRlTGVuZ3RofWlmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcrXCJSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBlKX12YXIgdD1lLmxlbmd0aDt2YXIgZj1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXT09PXRydWU7aWYoIWYmJnQ9PT0wKXJldHVybiAwO3ZhciBuPWZhbHNlO2Zvcig7Oyl7c3dpdGNoKHIpe2Nhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIHQ7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIHV0ZjhUb0J5dGVzKGUpLmxlbmd0aDtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gdCoyO2Nhc2VcImhleFwiOnJldHVybiB0Pj4+MTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gYmFzZTY0VG9CeXRlcyhlKS5sZW5ndGg7ZGVmYXVsdDppZihuKXtyZXR1cm4gZj8tMTp1dGY4VG9CeXRlcyhlKS5sZW5ndGh9cj0oXCJcIityKS50b0xvd2VyQ2FzZSgpO249dHJ1ZX19fUJ1ZmZlci5ieXRlTGVuZ3RoPWJ5dGVMZW5ndGg7ZnVuY3Rpb24gc2xvd1RvU3RyaW5nKGUscix0KXt2YXIgZj1mYWxzZTtpZihyPT09dW5kZWZpbmVkfHxyPDApe3I9MH1pZihyPnRoaXMubGVuZ3RoKXtyZXR1cm5cIlwifWlmKHQ9PT11bmRlZmluZWR8fHQ+dGhpcy5sZW5ndGgpe3Q9dGhpcy5sZW5ndGh9aWYodDw9MCl7cmV0dXJuXCJcIn10Pj4+PTA7cj4+Pj0wO2lmKHQ8PXIpe3JldHVyblwiXCJ9aWYoIWUpZT1cInV0ZjhcIjt3aGlsZSh0cnVlKXtzd2l0Y2goZSl7Y2FzZVwiaGV4XCI6cmV0dXJuIGhleFNsaWNlKHRoaXMscix0KTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gdXRmOFNsaWNlKHRoaXMscix0KTtjYXNlXCJhc2NpaVwiOnJldHVybiBhc2NpaVNsaWNlKHRoaXMscix0KTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gbGF0aW4xU2xpY2UodGhpcyxyLHQpO2Nhc2VcImJhc2U2NFwiOnJldHVybiBiYXNlNjRTbGljZSh0aGlzLHIsdCk7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLHIsdCk7ZGVmYXVsdDppZihmKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtlPShlK1wiXCIpLnRvTG93ZXJDYXNlKCk7Zj10cnVlfX19QnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXI9dHJ1ZTtmdW5jdGlvbiBzd2FwKGUscix0KXt2YXIgZj1lW3JdO2Vbcl09ZVt0XTtlW3RdPWZ9QnVmZmVyLnByb3RvdHlwZS5zd2FwMTY9ZnVuY3Rpb24gc3dhcDE2KCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSUyIT09MCl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0c1wiKX1mb3IodmFyIHI9MDtyPGU7cis9Mil7c3dhcCh0aGlzLHIscisxKX1yZXR1cm4gdGhpc307QnVmZmVyLnByb3RvdHlwZS5zd2FwMzI9ZnVuY3Rpb24gc3dhcDMyKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU0IT09MCl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0c1wiKX1mb3IodmFyIHI9MDtyPGU7cis9NCl7c3dhcCh0aGlzLHIsciszKTtzd2FwKHRoaXMscisxLHIrMil9cmV0dXJuIHRoaXN9O0J1ZmZlci5wcm90b3R5cGUuc3dhcDY0PWZ1bmN0aW9uIHN3YXA2NCgpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlOCE9PTApe3Rocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHNcIil9Zm9yKHZhciByPTA7cjxlO3IrPTgpe3N3YXAodGhpcyxyLHIrNyk7c3dhcCh0aGlzLHIrMSxyKzYpO3N3YXAodGhpcyxyKzIscis1KTtzd2FwKHRoaXMsciszLHIrNCl9cmV0dXJuIHRoaXN9O0J1ZmZlci5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24gdG9TdHJpbmcoKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlPT09MClyZXR1cm5cIlwiO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0wKXJldHVybiB1dGY4U2xpY2UodGhpcywwLGUpO3JldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtCdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nPUJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmc7QnVmZmVyLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24gZXF1YWxzKGUpe2lmKCFCdWZmZXIuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7aWYodGhpcz09PWUpcmV0dXJuIHRydWU7cmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsZSk9PT0wfTtCdWZmZXIucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24gaW5zcGVjdCgpe3ZhciBlPVwiXCI7dmFyIHQ9ci5JTlNQRUNUX01BWF9CWVRFUztlPXRoaXMudG9TdHJpbmcoXCJoZXhcIiwwLHQpLnJlcGxhY2UoLyguezJ9KS9nLFwiJDEgXCIpLnRyaW0oKTtpZih0aGlzLmxlbmd0aD50KWUrPVwiIC4uLiBcIjtyZXR1cm5cIjxCdWZmZXIgXCIrZStcIj5cIn07aWYoaSl7QnVmZmVyLnByb3RvdHlwZVtpXT1CdWZmZXIucHJvdG90eXBlLmluc3BlY3R9QnVmZmVyLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uIGNvbXBhcmUoZSxyLHQsZixuKXtpZihpc0luc3RhbmNlKGUsVWludDhBcnJheSkpe2U9QnVmZmVyLmZyb20oZSxlLm9mZnNldCxlLmJ5dGVMZW5ndGgpfWlmKCFCdWZmZXIuaXNCdWZmZXIoZSkpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcrXCJSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBlKX1pZihyPT09dW5kZWZpbmVkKXtyPTB9aWYodD09PXVuZGVmaW5lZCl7dD1lP2UubGVuZ3RoOjB9aWYoZj09PXVuZGVmaW5lZCl7Zj0wfWlmKG49PT11bmRlZmluZWQpe249dGhpcy5sZW5ndGh9aWYocjwwfHx0PmUubGVuZ3RofHxmPDB8fG4+dGhpcy5sZW5ndGgpe3Rocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpfWlmKGY+PW4mJnI+PXQpe3JldHVybiAwfWlmKGY+PW4pe3JldHVybi0xfWlmKHI+PXQpe3JldHVybiAxfXI+Pj49MDt0Pj4+PTA7Zj4+Pj0wO24+Pj49MDtpZih0aGlzPT09ZSlyZXR1cm4gMDt2YXIgaT1uLWY7dmFyIG89dC1yO3ZhciB1PU1hdGgubWluKGksbyk7dmFyIGE9dGhpcy5zbGljZShmLG4pO3ZhciBzPWUuc2xpY2Uocix0KTtmb3IodmFyIGg9MDtoPHU7KytoKXtpZihhW2hdIT09c1toXSl7aT1hW2hdO289c1toXTticmVha319aWYoaTxvKXJldHVybi0xO2lmKG88aSlyZXR1cm4gMTtyZXR1cm4gMH07ZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YoZSxyLHQsZixuKXtpZihlLmxlbmd0aD09PTApcmV0dXJuLTE7aWYodHlwZW9mIHQ9PT1cInN0cmluZ1wiKXtmPXQ7dD0wfWVsc2UgaWYodD4yMTQ3NDgzNjQ3KXt0PTIxNDc0ODM2NDd9ZWxzZSBpZih0PC0yMTQ3NDgzNjQ4KXt0PS0yMTQ3NDgzNjQ4fXQ9K3Q7aWYobnVtYmVySXNOYU4odCkpe3Q9bj8wOmUubGVuZ3RoLTF9aWYodDwwKXQ9ZS5sZW5ndGgrdDtpZih0Pj1lLmxlbmd0aCl7aWYobilyZXR1cm4tMTtlbHNlIHQ9ZS5sZW5ndGgtMX1lbHNlIGlmKHQ8MCl7aWYobil0PTA7ZWxzZSByZXR1cm4tMX1pZih0eXBlb2Ygcj09PVwic3RyaW5nXCIpe3I9QnVmZmVyLmZyb20ocixmKX1pZihCdWZmZXIuaXNCdWZmZXIocikpe2lmKHIubGVuZ3RoPT09MCl7cmV0dXJuLTF9cmV0dXJuIGFycmF5SW5kZXhPZihlLHIsdCxmLG4pfWVsc2UgaWYodHlwZW9mIHI9PT1cIm51bWJlclwiKXtyPXImMjU1O2lmKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mPT09XCJmdW5jdGlvblwiKXtpZihuKXtyZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGUscix0KX1lbHNle3JldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGUscix0KX19cmV0dXJuIGFycmF5SW5kZXhPZihlLFtyXSx0LGYsbil9dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1mdW5jdGlvbiBhcnJheUluZGV4T2YoZSxyLHQsZixuKXt2YXIgaT0xO3ZhciBvPWUubGVuZ3RoO3ZhciB1PXIubGVuZ3RoO2lmKGYhPT11bmRlZmluZWQpe2Y9U3RyaW5nKGYpLnRvTG93ZXJDYXNlKCk7aWYoZj09PVwidWNzMlwifHxmPT09XCJ1Y3MtMlwifHxmPT09XCJ1dGYxNmxlXCJ8fGY9PT1cInV0Zi0xNmxlXCIpe2lmKGUubGVuZ3RoPDJ8fHIubGVuZ3RoPDIpe3JldHVybi0xfWk9MjtvLz0yO3UvPTI7dC89Mn19ZnVuY3Rpb24gcmVhZChlLHIpe2lmKGk9PT0xKXtyZXR1cm4gZVtyXX1lbHNle3JldHVybiBlLnJlYWRVSW50MTZCRShyKmkpfX12YXIgYTtpZihuKXt2YXIgcz0tMTtmb3IoYT10O2E8bzthKyspe2lmKHJlYWQoZSxhKT09PXJlYWQocixzPT09LTE/MDphLXMpKXtpZihzPT09LTEpcz1hO2lmKGEtcysxPT09dSlyZXR1cm4gcyppfWVsc2V7aWYocyE9PS0xKWEtPWEtcztzPS0xfX19ZWxzZXtpZih0K3U+byl0PW8tdTtmb3IoYT10O2E+PTA7YS0tKXt2YXIgaD10cnVlO2Zvcih2YXIgYz0wO2M8dTtjKyspe2lmKHJlYWQoZSxhK2MpIT09cmVhZChyLGMpKXtoPWZhbHNlO2JyZWFrfX1pZihoKXJldHVybiBhfX1yZXR1cm4tMX1CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uIGluY2x1ZGVzKGUscix0KXtyZXR1cm4gdGhpcy5pbmRleE9mKGUscix0KSE9PS0xfTtCdWZmZXIucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24gaW5kZXhPZihlLHIsdCl7cmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsZSxyLHQsdHJ1ZSl9O0J1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2Y9ZnVuY3Rpb24gbGFzdEluZGV4T2YoZSxyLHQpe3JldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLGUscix0LGZhbHNlKX07ZnVuY3Rpb24gaGV4V3JpdGUoZSxyLHQsZil7dD1OdW1iZXIodCl8fDA7dmFyIG49ZS5sZW5ndGgtdDtpZighZil7Zj1ufWVsc2V7Zj1OdW1iZXIoZik7aWYoZj5uKXtmPW59fXZhciBpPXIubGVuZ3RoO2lmKGY+aS8yKXtmPWkvMn1mb3IodmFyIG89MDtvPGY7KytvKXt2YXIgdT1wYXJzZUludChyLnN1YnN0cihvKjIsMiksMTYpO2lmKG51bWJlcklzTmFOKHUpKXJldHVybiBvO2VbdCtvXT11fXJldHVybiBvfWZ1bmN0aW9uIHV0ZjhXcml0ZShlLHIsdCxmKXtyZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhyLGUubGVuZ3RoLXQpLGUsdCxmKX1mdW5jdGlvbiBhc2NpaVdyaXRlKGUscix0LGYpe3JldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhyKSxlLHQsZil9ZnVuY3Rpb24gbGF0aW4xV3JpdGUoZSxyLHQsZil7cmV0dXJuIGFzY2lpV3JpdGUoZSxyLHQsZil9ZnVuY3Rpb24gYmFzZTY0V3JpdGUoZSxyLHQsZil7cmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhyKSxlLHQsZil9ZnVuY3Rpb24gdWNzMldyaXRlKGUscix0LGYpe3JldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHIsZS5sZW5ndGgtdCksZSx0LGYpfUJ1ZmZlci5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24gd3JpdGUoZSxyLHQsZil7aWYocj09PXVuZGVmaW5lZCl7Zj1cInV0ZjhcIjt0PXRoaXMubGVuZ3RoO3I9MH1lbHNlIGlmKHQ9PT11bmRlZmluZWQmJnR5cGVvZiByPT09XCJzdHJpbmdcIil7Zj1yO3Q9dGhpcy5sZW5ndGg7cj0wfWVsc2UgaWYoaXNGaW5pdGUocikpe3I9cj4+PjA7aWYoaXNGaW5pdGUodCkpe3Q9dD4+PjA7aWYoZj09PXVuZGVmaW5lZClmPVwidXRmOFwifWVsc2V7Zj10O3Q9dW5kZWZpbmVkfX1lbHNle3Rocm93IG5ldyBFcnJvcihcIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkXCIpfXZhciBuPXRoaXMubGVuZ3RoLXI7aWYodD09PXVuZGVmaW5lZHx8dD5uKXQ9bjtpZihlLmxlbmd0aD4wJiYodDwwfHxyPDApfHxyPnRoaXMubGVuZ3RoKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpfWlmKCFmKWY9XCJ1dGY4XCI7dmFyIGk9ZmFsc2U7Zm9yKDs7KXtzd2l0Y2goZil7Y2FzZVwiaGV4XCI6cmV0dXJuIGhleFdyaXRlKHRoaXMsZSxyLHQpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiB1dGY4V3JpdGUodGhpcyxlLHIsdCk7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gYXNjaWlXcml0ZSh0aGlzLGUscix0KTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gbGF0aW4xV3JpdGUodGhpcyxlLHIsdCk7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsZSxyLHQpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiB1Y3MyV3JpdGUodGhpcyxlLHIsdCk7ZGVmYXVsdDppZihpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitmKTtmPShcIlwiK2YpLnRvTG93ZXJDYXNlKCk7aT10cnVlfX19O0J1ZmZlci5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uIHRvSlNPTigpe3JldHVybnt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTtmdW5jdGlvbiBiYXNlNjRTbGljZShlLHIsdCl7aWYocj09PTAmJnQ9PT1lLmxlbmd0aCl7cmV0dXJuIGYuZnJvbUJ5dGVBcnJheShlKX1lbHNle3JldHVybiBmLmZyb21CeXRlQXJyYXkoZS5zbGljZShyLHQpKX19ZnVuY3Rpb24gdXRmOFNsaWNlKGUscix0KXt0PU1hdGgubWluKGUubGVuZ3RoLHQpO3ZhciBmPVtdO3ZhciBuPXI7d2hpbGUobjx0KXt2YXIgaT1lW25dO3ZhciBvPW51bGw7dmFyIHU9aT4yMzk/NDppPjIyMz8zOmk+MTkxPzI6MTtpZihuK3U8PXQpe3ZhciBhLHMsaCxjO3N3aXRjaCh1KXtjYXNlIDE6aWYoaTwxMjgpe289aX1icmVhaztjYXNlIDI6YT1lW24rMV07aWYoKGEmMTkyKT09PTEyOCl7Yz0oaSYzMSk8PDZ8YSY2MztpZihjPjEyNyl7bz1jfX1icmVhaztjYXNlIDM6YT1lW24rMV07cz1lW24rMl07aWYoKGEmMTkyKT09PTEyOCYmKHMmMTkyKT09PTEyOCl7Yz0oaSYxNSk8PDEyfChhJjYzKTw8NnxzJjYzO2lmKGM+MjA0NyYmKGM8NTUyOTZ8fGM+NTczNDMpKXtvPWN9fWJyZWFrO2Nhc2UgNDphPWVbbisxXTtzPWVbbisyXTtoPWVbbiszXTtpZigoYSYxOTIpPT09MTI4JiYocyYxOTIpPT09MTI4JiYoaCYxOTIpPT09MTI4KXtjPShpJjE1KTw8MTh8KGEmNjMpPDwxMnwocyY2Myk8PDZ8aCY2MztpZihjPjY1NTM1JiZjPDExMTQxMTIpe289Y319fX1pZihvPT09bnVsbCl7bz02NTUzMzt1PTF9ZWxzZSBpZihvPjY1NTM1KXtvLT02NTUzNjtmLnB1c2gobz4+PjEwJjEwMjN8NTUyOTYpO289NTYzMjB8byYxMDIzfWYucHVzaChvKTtuKz11fXJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkoZil9dmFyIHU9NDA5NjtmdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkoZSl7dmFyIHI9ZS5sZW5ndGg7aWYocjw9dSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUpfXZhciB0PVwiXCI7dmFyIGY9MDt3aGlsZShmPHIpe3QrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUuc2xpY2UoZixmKz11KSl9cmV0dXJuIHR9ZnVuY3Rpb24gYXNjaWlTbGljZShlLHIsdCl7dmFyIGY9XCJcIjt0PU1hdGgubWluKGUubGVuZ3RoLHQpO2Zvcih2YXIgbj1yO248dDsrK24pe2YrPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtuXSYxMjcpfXJldHVybiBmfWZ1bmN0aW9uIGxhdGluMVNsaWNlKGUscix0KXt2YXIgZj1cIlwiO3Q9TWF0aC5taW4oZS5sZW5ndGgsdCk7Zm9yKHZhciBuPXI7bjx0Oysrbil7Zis9U3RyaW5nLmZyb21DaGFyQ29kZShlW25dKX1yZXR1cm4gZn1mdW5jdGlvbiBoZXhTbGljZShlLHIsdCl7dmFyIGY9ZS5sZW5ndGg7aWYoIXJ8fHI8MClyPTA7aWYoIXR8fHQ8MHx8dD5mKXQ9Zjt2YXIgbj1cIlwiO2Zvcih2YXIgaT1yO2k8dDsrK2kpe24rPXNbZVtpXV19cmV0dXJuIG59ZnVuY3Rpb24gdXRmMTZsZVNsaWNlKGUscix0KXt2YXIgZj1lLnNsaWNlKHIsdCk7dmFyIG49XCJcIjtmb3IodmFyIGk9MDtpPGYubGVuZ3RoO2krPTIpe24rPVN0cmluZy5mcm9tQ2hhckNvZGUoZltpXStmW2krMV0qMjU2KX1yZXR1cm4gbn1CdWZmZXIucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uIHNsaWNlKGUscil7dmFyIHQ9dGhpcy5sZW5ndGg7ZT1+fmU7cj1yPT09dW5kZWZpbmVkP3Q6fn5yO2lmKGU8MCl7ZSs9dDtpZihlPDApZT0wfWVsc2UgaWYoZT50KXtlPXR9aWYocjwwKXtyKz10O2lmKHI8MClyPTB9ZWxzZSBpZihyPnQpe3I9dH1pZihyPGUpcj1lO3ZhciBmPXRoaXMuc3ViYXJyYXkoZSxyKTtPYmplY3Quc2V0UHJvdG90eXBlT2YoZixCdWZmZXIucHJvdG90eXBlKTtyZXR1cm4gZn07ZnVuY3Rpb24gY2hlY2tPZmZzZXQoZSxyLHQpe2lmKGUlMSE9PTB8fGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihlK3I+dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIil9QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFPWZ1bmN0aW9uIHJlYWRVSW50TEUoZSxyLHQpe2U9ZT4+PjA7cj1yPj4+MDtpZighdCljaGVja09mZnNldChlLHIsdGhpcy5sZW5ndGgpO3ZhciBmPXRoaXNbZV07dmFyIG49MTt2YXIgaT0wO3doaWxlKCsraTxyJiYobio9MjU2KSl7Zis9dGhpc1tlK2ldKm59cmV0dXJuIGZ9O0J1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbiByZWFkVUludEJFKGUscix0KXtlPWU+Pj4wO3I9cj4+PjA7aWYoIXQpe2NoZWNrT2Zmc2V0KGUscix0aGlzLmxlbmd0aCl9dmFyIGY9dGhpc1tlKy0tcl07dmFyIG49MTt3aGlsZShyPjAmJihuKj0yNTYpKXtmKz10aGlzW2UrLS1yXSpufXJldHVybiBmfTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OD1mdW5jdGlvbiByZWFkVUludDgoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsMSx0aGlzLmxlbmd0aCk7cmV0dXJuIHRoaXNbZV19O0J1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFPWZ1bmN0aW9uIHJlYWRVSW50MTZMRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSwyLHRoaXMubGVuZ3RoKTtyZXR1cm4gdGhpc1tlXXx0aGlzW2UrMV08PDh9O0J1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFPWZ1bmN0aW9uIHJlYWRVSW50MTZCRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSwyLHRoaXMubGVuZ3RoKTtyZXR1cm4gdGhpc1tlXTw8OHx0aGlzW2UrMV19O0J1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFPWZ1bmN0aW9uIHJlYWRVSW50MzJMRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw0LHRoaXMubGVuZ3RoKTtyZXR1cm4odGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNikrdGhpc1tlKzNdKjE2Nzc3MjE2fTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRT1mdW5jdGlvbiByZWFkVUludDMyQkUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsNCx0aGlzLmxlbmd0aCk7cmV0dXJuIHRoaXNbZV0qMTY3NzcyMTYrKHRoaXNbZSsxXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXSl9O0J1ZmZlci5wcm90b3R5cGUucmVhZEludExFPWZ1bmN0aW9uIHJlYWRJbnRMRShlLHIsdCl7ZT1lPj4+MDtyPXI+Pj4wO2lmKCF0KWNoZWNrT2Zmc2V0KGUscix0aGlzLmxlbmd0aCk7dmFyIGY9dGhpc1tlXTt2YXIgbj0xO3ZhciBpPTA7d2hpbGUoKytpPHImJihuKj0yNTYpKXtmKz10aGlzW2UraV0qbn1uKj0xMjg7aWYoZj49bilmLT1NYXRoLnBvdygyLDgqcik7cmV0dXJuIGZ9O0J1ZmZlci5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uIHJlYWRJbnRCRShlLHIsdCl7ZT1lPj4+MDtyPXI+Pj4wO2lmKCF0KWNoZWNrT2Zmc2V0KGUscix0aGlzLmxlbmd0aCk7dmFyIGY9cjt2YXIgbj0xO3ZhciBpPXRoaXNbZSstLWZdO3doaWxlKGY+MCYmKG4qPTI1Nikpe2krPXRoaXNbZSstLWZdKm59bio9MTI4O2lmKGk+PW4paS09TWF0aC5wb3coMiw4KnIpO3JldHVybiBpfTtCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4PWZ1bmN0aW9uIHJlYWRJbnQ4KGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDEsdGhpcy5sZW5ndGgpO2lmKCEodGhpc1tlXSYxMjgpKXJldHVybiB0aGlzW2VdO3JldHVybigyNTUtdGhpc1tlXSsxKSotMX07QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRT1mdW5jdGlvbiByZWFkSW50MTZMRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSwyLHRoaXMubGVuZ3RoKTt2YXIgdD10aGlzW2VdfHRoaXNbZSsxXTw8ODtyZXR1cm4gdCYzMjc2OD90fDQyOTQ5MDE3NjA6dH07QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbiByZWFkSW50MTZCRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSwyLHRoaXMubGVuZ3RoKTt2YXIgdD10aGlzW2UrMV18dGhpc1tlXTw8ODtyZXR1cm4gdCYzMjc2OD90fDQyOTQ5MDE3NjA6dH07QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRT1mdW5jdGlvbiByZWFkSW50MzJMRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw0LHRoaXMubGVuZ3RoKTtyZXR1cm4gdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fTtCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFPWZ1bmN0aW9uIHJlYWRJbnQzMkJFKGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDQsdGhpcy5sZW5ndGgpO3JldHVybiB0aGlzW2VdPDwyNHx0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM119O0J1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24gcmVhZEZsb2F0TEUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsNCx0aGlzLmxlbmd0aCk7cmV0dXJuIG4ucmVhZCh0aGlzLGUsdHJ1ZSwyMyw0KX07QnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRT1mdW5jdGlvbiByZWFkRmxvYXRCRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw0LHRoaXMubGVuZ3RoKTtyZXR1cm4gbi5yZWFkKHRoaXMsZSxmYWxzZSwyMyw0KX07QnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24gcmVhZERvdWJsZUxFKGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDgsdGhpcy5sZW5ndGgpO3JldHVybiBuLnJlYWQodGhpcyxlLHRydWUsNTIsOCl9O0J1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFPWZ1bmN0aW9uIHJlYWREb3VibGVCRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw4LHRoaXMubGVuZ3RoKTtyZXR1cm4gbi5yZWFkKHRoaXMsZSxmYWxzZSw1Miw4KX07ZnVuY3Rpb24gY2hlY2tJbnQoZSxyLHQsZixuLGkpe2lmKCFCdWZmZXIuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYocj5ufHxyPGkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYodCtmPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfUJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24gd3JpdGVVSW50TEUoZSxyLHQsZil7ZT0rZTtyPXI+Pj4wO3Q9dD4+PjA7aWYoIWYpe3ZhciBuPU1hdGgucG93KDIsOCp0KS0xO2NoZWNrSW50KHRoaXMsZSxyLHQsbiwwKX12YXIgaT0xO3ZhciBvPTA7dGhpc1tyXT1lJjI1NTt3aGlsZSgrK288dCYmKGkqPTI1Nikpe3RoaXNbcitvXT1lL2kmMjU1fXJldHVybiByK3R9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkU9ZnVuY3Rpb24gd3JpdGVVSW50QkUoZSxyLHQsZil7ZT0rZTtyPXI+Pj4wO3Q9dD4+PjA7aWYoIWYpe3ZhciBuPU1hdGgucG93KDIsOCp0KS0xO2NoZWNrSW50KHRoaXMsZSxyLHQsbiwwKX12YXIgaT10LTE7dmFyIG89MTt0aGlzW3IraV09ZSYyNTU7d2hpbGUoLS1pPj0wJiYobyo9MjU2KSl7dGhpc1tyK2ldPWUvbyYyNTV9cmV0dXJuIHIrdH07QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4PWZ1bmN0aW9uIHdyaXRlVUludDgoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciwxLDI1NSwwKTt0aGlzW3JdPWUmMjU1O3JldHVybiByKzF9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRT1mdW5jdGlvbiB3cml0ZVVJbnQxNkxFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsMiw2NTUzNSwwKTt0aGlzW3JdPWUmMjU1O3RoaXNbcisxXT1lPj4+ODtyZXR1cm4gcisyfTtCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkU9ZnVuY3Rpb24gd3JpdGVVSW50MTZCRShlLHIsdCl7ZT0rZTtyPXI+Pj4wO2lmKCF0KWNoZWNrSW50KHRoaXMsZSxyLDIsNjU1MzUsMCk7dGhpc1tyXT1lPj4+ODt0aGlzW3IrMV09ZSYyNTU7cmV0dXJuIHIrMn07QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFPWZ1bmN0aW9uIHdyaXRlVUludDMyTEUoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciw0LDQyOTQ5NjcyOTUsMCk7dGhpc1tyKzNdPWU+Pj4yNDt0aGlzW3IrMl09ZT4+PjE2O3RoaXNbcisxXT1lPj4+ODt0aGlzW3JdPWUmMjU1O3JldHVybiByKzR9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRT1mdW5jdGlvbiB3cml0ZVVJbnQzMkJFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsNCw0Mjk0OTY3Mjk1LDApO3RoaXNbcl09ZT4+PjI0O3RoaXNbcisxXT1lPj4+MTY7dGhpc1tyKzJdPWU+Pj44O3RoaXNbciszXT1lJjI1NTtyZXR1cm4gcis0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24gd3JpdGVJbnRMRShlLHIsdCxmKXtlPStlO3I9cj4+PjA7aWYoIWYpe3ZhciBuPU1hdGgucG93KDIsOCp0LTEpO2NoZWNrSW50KHRoaXMsZSxyLHQsbi0xLC1uKX12YXIgaT0wO3ZhciBvPTE7dmFyIHU9MDt0aGlzW3JdPWUmMjU1O3doaWxlKCsraTx0JiYobyo9MjU2KSl7aWYoZTwwJiZ1PT09MCYmdGhpc1tyK2ktMV0hPT0wKXt1PTF9dGhpc1tyK2ldPShlL28+PjApLXUmMjU1fXJldHVybiByK3R9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRT1mdW5jdGlvbiB3cml0ZUludEJFKGUscix0LGYpe2U9K2U7cj1yPj4+MDtpZighZil7dmFyIG49TWF0aC5wb3coMiw4KnQtMSk7Y2hlY2tJbnQodGhpcyxlLHIsdCxuLTEsLW4pfXZhciBpPXQtMTt2YXIgbz0xO3ZhciB1PTA7dGhpc1tyK2ldPWUmMjU1O3doaWxlKC0taT49MCYmKG8qPTI1Nikpe2lmKGU8MCYmdT09PTAmJnRoaXNbcitpKzFdIT09MCl7dT0xfXRoaXNbcitpXT0oZS9vPj4wKS11JjI1NX1yZXR1cm4gcit0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbiB3cml0ZUludDgoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciwxLDEyNywtMTI4KTtpZihlPDApZT0yNTUrZSsxO3RoaXNbcl09ZSYyNTU7cmV0dXJuIHIrMX07QnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24gd3JpdGVJbnQxNkxFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsMiwzMjc2NywtMzI3NjgpO3RoaXNbcl09ZSYyNTU7dGhpc1tyKzFdPWU+Pj44O3JldHVybiByKzJ9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFPWZ1bmN0aW9uIHdyaXRlSW50MTZCRShlLHIsdCl7ZT0rZTtyPXI+Pj4wO2lmKCF0KWNoZWNrSW50KHRoaXMsZSxyLDIsMzI3NjcsLTMyNzY4KTt0aGlzW3JdPWU+Pj44O3RoaXNbcisxXT1lJjI1NTtyZXR1cm4gcisyfTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRT1mdW5jdGlvbiB3cml0ZUludDMyTEUoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpO3RoaXNbcl09ZSYyNTU7dGhpc1tyKzFdPWU+Pj44O3RoaXNbcisyXT1lPj4+MTY7dGhpc1tyKzNdPWU+Pj4yNDtyZXR1cm4gcis0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbiB3cml0ZUludDMyQkUoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpO2lmKGU8MCllPTQyOTQ5NjcyOTUrZSsxO3RoaXNbcl09ZT4+PjI0O3RoaXNbcisxXT1lPj4+MTY7dGhpc1tyKzJdPWU+Pj44O3RoaXNbciszXT1lJjI1NTtyZXR1cm4gcis0fTtmdW5jdGlvbiBjaGVja0lFRUU3NTQoZSxyLHQsZixuLGkpe2lmKHQrZj5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gd3JpdGVGbG9hdChlLHIsdCxmLGkpe3I9K3I7dD10Pj4+MDtpZighaSl7Y2hlY2tJRUVFNzU0KGUscix0LDQsMzQwMjgyMzQ2NjM4NTI4ODZlMjIsLTM0MDI4MjM0NjYzODUyODg2ZTIyKX1uLndyaXRlKGUscix0LGYsMjMsNCk7cmV0dXJuIHQrNH1CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRT1mdW5jdGlvbiB3cml0ZUZsb2F0TEUoZSxyLHQpe3JldHVybiB3cml0ZUZsb2F0KHRoaXMsZSxyLHRydWUsdCl9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uIHdyaXRlRmxvYXRCRShlLHIsdCl7cmV0dXJuIHdyaXRlRmxvYXQodGhpcyxlLHIsZmFsc2UsdCl9O2Z1bmN0aW9uIHdyaXRlRG91YmxlKGUscix0LGYsaSl7cj0rcjt0PXQ+Pj4wO2lmKCFpKXtjaGVja0lFRUU3NTQoZSxyLHQsOCwxNzk3NjkzMTM0ODYyMzE1N2UyOTIsLTE3OTc2OTMxMzQ4NjIzMTU3ZTI5Mil9bi53cml0ZShlLHIsdCxmLDUyLDgpO3JldHVybiB0Kzh9QnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uIHdyaXRlRG91YmxlTEUoZSxyLHQpe3JldHVybiB3cml0ZURvdWJsZSh0aGlzLGUscix0cnVlLHQpfTtCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkU9ZnVuY3Rpb24gd3JpdGVEb3VibGVCRShlLHIsdCl7cmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsZSxyLGZhbHNlLHQpfTtCdWZmZXIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24gY29weShlLHIsdCxmKXtpZighQnVmZmVyLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7aWYoIXQpdD0wO2lmKCFmJiZmIT09MClmPXRoaXMubGVuZ3RoO2lmKHI+PWUubGVuZ3RoKXI9ZS5sZW5ndGg7aWYoIXIpcj0wO2lmKGY+MCYmZjx0KWY9dDtpZihmPT09dClyZXR1cm4gMDtpZihlLmxlbmd0aD09PTB8fHRoaXMubGVuZ3RoPT09MClyZXR1cm4gMDtpZihyPDApe3Rocm93IG5ldyBSYW5nZUVycm9yKFwidGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kc1wiKX1pZih0PDB8fHQ+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKGY8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZUVuZCBvdXQgb2YgYm91bmRzXCIpO2lmKGY+dGhpcy5sZW5ndGgpZj10aGlzLmxlbmd0aDtpZihlLmxlbmd0aC1yPGYtdCl7Zj1lLmxlbmd0aC1yK3R9dmFyIG49Zi10O2lmKHRoaXM9PT1lJiZ0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbj09PVwiZnVuY3Rpb25cIil7dGhpcy5jb3B5V2l0aGluKHIsdCxmKX1lbHNlIGlmKHRoaXM9PT1lJiZ0PHImJnI8Zil7Zm9yKHZhciBpPW4tMTtpPj0wOy0taSl7ZVtpK3JdPXRoaXNbaSt0XX19ZWxzZXtVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkodCxmKSxyKX1yZXR1cm4gbn07QnVmZmVyLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uIGZpbGwoZSxyLHQsZil7aWYodHlwZW9mIGU9PT1cInN0cmluZ1wiKXtpZih0eXBlb2Ygcj09PVwic3RyaW5nXCIpe2Y9cjtyPTA7dD10aGlzLmxlbmd0aH1lbHNlIGlmKHR5cGVvZiB0PT09XCJzdHJpbmdcIil7Zj10O3Q9dGhpcy5sZW5ndGh9aWYoZiE9PXVuZGVmaW5lZCYmdHlwZW9mIGYhPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKX1pZih0eXBlb2YgZj09PVwic3RyaW5nXCImJiFCdWZmZXIuaXNFbmNvZGluZyhmKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2YpfWlmKGUubGVuZ3RoPT09MSl7dmFyIG49ZS5jaGFyQ29kZUF0KDApO2lmKGY9PT1cInV0ZjhcIiYmbjwxMjh8fGY9PT1cImxhdGluMVwiKXtlPW59fX1lbHNlIGlmKHR5cGVvZiBlPT09XCJudW1iZXJcIil7ZT1lJjI1NX1lbHNlIGlmKHR5cGVvZiBlPT09XCJib29sZWFuXCIpe2U9TnVtYmVyKGUpfWlmKHI8MHx8dGhpcy5sZW5ndGg8cnx8dGhpcy5sZW5ndGg8dCl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIil9aWYodDw9cil7cmV0dXJuIHRoaXN9cj1yPj4+MDt0PXQ9PT11bmRlZmluZWQ/dGhpcy5sZW5ndGg6dD4+PjA7aWYoIWUpZT0wO3ZhciBpO2lmKHR5cGVvZiBlPT09XCJudW1iZXJcIil7Zm9yKGk9cjtpPHQ7KytpKXt0aGlzW2ldPWV9fWVsc2V7dmFyIG89QnVmZmVyLmlzQnVmZmVyKGUpP2U6QnVmZmVyLmZyb20oZSxmKTt2YXIgdT1vLmxlbmd0aDtpZih1PT09MCl7dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKX1mb3IoaT0wO2k8dC1yOysraSl7dGhpc1tpK3JdPW9baSV1XX19cmV0dXJuIHRoaXN9O3ZhciBhPS9bXisvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gYmFzZTY0Y2xlYW4oZSl7ZT1lLnNwbGl0KFwiPVwiKVswXTtlPWUudHJpbSgpLnJlcGxhY2UoYSxcIlwiKTtpZihlLmxlbmd0aDwyKXJldHVyblwiXCI7d2hpbGUoZS5sZW5ndGglNCE9PTApe2U9ZStcIj1cIn1yZXR1cm4gZX1mdW5jdGlvbiB1dGY4VG9CeXRlcyhlLHIpe3I9cnx8SW5maW5pdHk7dmFyIHQ7dmFyIGY9ZS5sZW5ndGg7dmFyIG49bnVsbDt2YXIgaT1bXTtmb3IodmFyIG89MDtvPGY7KytvKXt0PWUuY2hhckNvZGVBdChvKTtpZih0PjU1Mjk1JiZ0PDU3MzQ0KXtpZighbil7aWYodD41NjMxOSl7aWYoKHItPTMpPi0xKWkucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9ZWxzZSBpZihvKzE9PT1mKXtpZigoci09Myk+LTEpaS5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1uPXQ7Y29udGludWV9aWYodDw1NjMyMCl7aWYoKHItPTMpPi0xKWkucHVzaCgyMzksMTkxLDE4OSk7bj10O2NvbnRpbnVlfXQ9KG4tNTUyOTY8PDEwfHQtNTYzMjApKzY1NTM2fWVsc2UgaWYobil7aWYoKHItPTMpPi0xKWkucHVzaCgyMzksMTkxLDE4OSl9bj1udWxsO2lmKHQ8MTI4KXtpZigoci09MSk8MClicmVhaztpLnB1c2godCl9ZWxzZSBpZih0PDIwNDgpe2lmKChyLT0yKTwwKWJyZWFrO2kucHVzaCh0Pj42fDE5Mix0JjYzfDEyOCl9ZWxzZSBpZih0PDY1NTM2KXtpZigoci09Myk8MClicmVhaztpLnB1c2godD4+MTJ8MjI0LHQ+PjYmNjN8MTI4LHQmNjN8MTI4KX1lbHNlIGlmKHQ8MTExNDExMil7aWYoKHItPTQpPDApYnJlYWs7aS5wdXNoKHQ+PjE4fDI0MCx0Pj4xMiY2M3wxMjgsdD4+NiY2M3wxMjgsdCY2M3wxMjgpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpfX1yZXR1cm4gaX1mdW5jdGlvbiBhc2NpaVRvQnl0ZXMoZSl7dmFyIHI9W107Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDsrK3Qpe3IucHVzaChlLmNoYXJDb2RlQXQodCkmMjU1KX1yZXR1cm4gcn1mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyhlLHIpe3ZhciB0LGYsbjt2YXIgaT1bXTtmb3IodmFyIG89MDtvPGUubGVuZ3RoOysrbyl7aWYoKHItPTIpPDApYnJlYWs7dD1lLmNoYXJDb2RlQXQobyk7Zj10Pj44O249dCUyNTY7aS5wdXNoKG4pO2kucHVzaChmKX1yZXR1cm4gaX1mdW5jdGlvbiBiYXNlNjRUb0J5dGVzKGUpe3JldHVybiBmLnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKGUpKX1mdW5jdGlvbiBibGl0QnVmZmVyKGUscix0LGYpe2Zvcih2YXIgbj0wO248ZjsrK24pe2lmKG4rdD49ci5sZW5ndGh8fG4+PWUubGVuZ3RoKWJyZWFrO3Jbbit0XT1lW25dfXJldHVybiBufWZ1bmN0aW9uIGlzSW5zdGFuY2UoZSxyKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHJ8fGUhPW51bGwmJmUuY29uc3RydWN0b3IhPW51bGwmJmUuY29uc3RydWN0b3IubmFtZSE9bnVsbCYmZS5jb25zdHJ1Y3Rvci5uYW1lPT09ci5uYW1lfWZ1bmN0aW9uIG51bWJlcklzTmFOKGUpe3JldHVybiBlIT09ZX12YXIgcz1mdW5jdGlvbigpe3ZhciBlPVwiMDEyMzQ1Njc4OWFiY2RlZlwiO3ZhciByPW5ldyBBcnJheSgyNTYpO2Zvcih2YXIgdD0wO3Q8MTY7Kyt0KXt2YXIgZj10KjE2O2Zvcih2YXIgbj0wO248MTY7KytuKXtyW2Yrbl09ZVt0XStlW25dfX1yZXR1cm4gcn0oKX0sNzgzOmZ1bmN0aW9uKGUscil7XG4vKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuci5yZWFkPWZ1bmN0aW9uKGUscix0LGYsbil7dmFyIGksbzt2YXIgdT1uKjgtZi0xO3ZhciBhPSgxPDx1KS0xO3ZhciBzPWE+PjE7dmFyIGg9LTc7dmFyIGM9dD9uLTE6MDt2YXIgbD10Py0xOjE7dmFyIHA9ZVtyK2NdO2MrPWw7aT1wJigxPDwtaCktMTtwPj49LWg7aCs9dTtmb3IoO2g+MDtpPWkqMjU2K2VbcitjXSxjKz1sLGgtPTgpe31vPWkmKDE8PC1oKS0xO2k+Pj0taDtoKz1mO2Zvcig7aD4wO289byoyNTYrZVtyK2NdLGMrPWwsaC09OCl7fWlmKGk9PT0wKXtpPTEtc31lbHNlIGlmKGk9PT1hKXtyZXR1cm4gbz9OYU46KHA/LTE6MSkqSW5maW5pdHl9ZWxzZXtvPW8rTWF0aC5wb3coMixmKTtpPWktc31yZXR1cm4ocD8tMToxKSpvKk1hdGgucG93KDIsaS1mKX07ci53cml0ZT1mdW5jdGlvbihlLHIsdCxmLG4saSl7dmFyIG8sdSxhO3ZhciBzPWkqOC1uLTE7dmFyIGg9KDE8PHMpLTE7dmFyIGM9aD4+MTt2YXIgbD1uPT09MjM/TWF0aC5wb3coMiwtMjQpLU1hdGgucG93KDIsLTc3KTowO3ZhciBwPWY/MDppLTE7dmFyIHk9Zj8xOi0xO3ZhciBnPXI8MHx8cj09PTAmJjEvcjwwPzE6MDtyPU1hdGguYWJzKHIpO2lmKGlzTmFOKHIpfHxyPT09SW5maW5pdHkpe3U9aXNOYU4ocik/MTowO289aH1lbHNle289TWF0aC5mbG9vcihNYXRoLmxvZyhyKS9NYXRoLkxOMik7aWYociooYT1NYXRoLnBvdygyLC1vKSk8MSl7by0tO2EqPTJ9aWYobytjPj0xKXtyKz1sL2F9ZWxzZXtyKz1sKk1hdGgucG93KDIsMS1jKX1pZihyKmE+PTIpe28rKzthLz0yfWlmKG8rYz49aCl7dT0wO289aH1lbHNlIGlmKG8rYz49MSl7dT0ociphLTEpKk1hdGgucG93KDIsbik7bz1vK2N9ZWxzZXt1PXIqTWF0aC5wb3coMixjLTEpKk1hdGgucG93KDIsbik7bz0wfX1mb3IoO24+PTg7ZVt0K3BdPXUmMjU1LHArPXksdS89MjU2LG4tPTgpe31vPW88PG58dTtzKz1uO2Zvcig7cz4wO2VbdCtwXT1vJjI1NSxwKz15LG8vPTI1NixzLT04KXt9ZVt0K3AteV18PWcqMTI4fX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIGY9clt0XTtpZihmIT09dW5kZWZpbmVkKXtyZXR1cm4gZi5leHBvcnRzfXZhciBuPXJbdF09e2V4cG9ydHM6e319O3ZhciBpPXRydWU7dHJ5e2VbdF0obixuLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7aT1mYWxzZX1maW5hbGx5e2lmKGkpZGVsZXRlIHJbdF19cmV0dXJuIG4uZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg3Mik7bW9kdWxlLmV4cG9ydHM9dH0pKCk7Il0sIm5hbWVzIjpbImUiLCJyIiwiYnl0ZUxlbmd0aCIsInRvQnl0ZUFycmF5IiwiZnJvbUJ5dGVBcnJheSIsInQiLCJmIiwibiIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsImkiLCJvIiwidSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJnZXRMZW5zIiwiRXJyb3IiLCJpbmRleE9mIiwiX2J5dGVMZW5ndGgiLCJhIiwicyIsImgiLCJ0cmlwbGV0VG9CYXNlNjQiLCJlbmNvZGVDaHVuayIsInB1c2giLCJqb2luIiwiU3ltYm9sIiwiZm9yIiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImNvbnNvbGUiLCJlcnJvciIsImZvbyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiaXNCdWZmZXIiLCJ1bmRlZmluZWQiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiY3JlYXRlQnVmZmVyIiwiUmFuZ2VFcnJvciIsIlR5cGVFcnJvciIsImFsbG9jVW5zYWZlIiwiZnJvbSIsInBvb2xTaXplIiwiZnJvbVN0cmluZyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiZnJvbUFycmF5TGlrZSIsImlzSW5zdGFuY2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwiYWxsb2MiLCJmaWxsIiwiY2hlY2tlZCIsImFsbG9jVW5zYWZlU2xvdyIsImlzRW5jb2RpbmciLCJ3cml0ZSIsInNsaWNlIiwiY29weSIsIm51bWJlcklzTmFOIiwidHlwZSIsImlzQXJyYXkiLCJkYXRhIiwidG9TdHJpbmciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwib2Zmc2V0IiwiTWF0aCIsIm1pbiIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uY2F0IiwiYXJndW1lbnRzIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcHBseSIsInRvTG9jYWxlU3RyaW5nIiwiZXF1YWxzIiwiaW5zcGVjdCIsInJlcGxhY2UiLCJ0cmltIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJhcnJheUluZGV4T2YiLCJjYWxsIiwibGFzdEluZGV4T2YiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiYyIsImluY2x1ZGVzIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiZnJvbUNoYXJDb2RlIiwic3ViYXJyYXkiLCJjaGVja09mZnNldCIsInJlYWRVSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJjaGVja0ludCIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJjb3B5V2l0aGluIiwic2V0IiwiYmFzZTY0Y2xlYW4iLCJzcGxpdCIsIkluZmluaXR5IiwiY29uc3RydWN0b3IiLCJuYW1lIiwibCIsInAiLCJOYU4iLCJ5IiwiZyIsImFicyIsImlzTmFOIiwiZmxvb3IiLCJsb2ciLCJMTjIiLCJfX25jY3dwY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImFiIiwiX19kaXJuYW1lIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xHLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.js":
/*!*********************!*\
  !*** ./app/page.js ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst geminiApiKey = \"AIzaSyD5itJo90Ziv0l-yZ774fUckZgDfzMMMP4\";\nconst exampleResults = [\n    {\n        imageUrl: \"https://placekitten.com/200/300\",\n        results: \"Name: Peace Lily\\nScientific Name: Spathiphyllum\\nCare: Low light, water when soil is dry\\nOrigin: Tropical regions of America and Southeast Asia\"\n    },\n    {\n        imageUrl: \"https://placekitten.com/200/301\",\n        results: \"Name: Running Shoe\\nBrand: Nike\\nMaterial: Mesh and rubber\\nUse: Sports and running\"\n    },\n    {\n        imageUrl: \"https://placekitten.com/200/302\",\n        results: \"Name: Laptop\\nBrand: Apple\\nModel: MacBook Pro\\nFeatures: Retina display, Touch Bar\"\n    }\n];\nfunction Home() {\n    _s();\n    const [image, setImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [imageUrl, setImageUrl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [results, setResults] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleImageUpload = (event)=>{\n        const file = event.target.files[0];\n        if (file) {\n            setImage(file);\n            setImageUrl(URL.createObjectURL(file));\n        }\n    };\n    const handleCameraCapture = async ()=>{\n        try {\n            const permissionStatus = await navigator.permissions.query({\n                name: \"camera\"\n            });\n            if (permissionStatus.state === \"denied\") {\n                setError(\"Camera permission was denied. Please allow camera access in your browser settings.\");\n                return;\n            }\n            if (permissionStatus.state !== \"granted\") {\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: true\n                });\n                stream.getTracks().forEach((track)=>track.stop());\n            }\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: true\n            });\n            const videoTrack = stream.getVideoTracks()[0];\n            const imageCapture = new ImageCapture(videoTrack);\n            const photo = await imageCapture.takePhoto();\n            stream.getTracks().forEach((track)=>track.stop());\n            setImage(photo);\n            setImageUrl(URL.createObjectURL(photo));\n        } catch (err) {\n            setError(\"Error accessing camera: \" + err.message);\n        }\n    };\n    const identifyObject = async ()=>{\n        if (!image) {\n            setError(\"Please upload or capture an image first.\");\n            return;\n        }\n        setLoading(true);\n        setError(null);\n        setResults(null);\n        try {\n            const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.GoogleGenerativeAI(geminiApiKey);\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            const imagePart = {\n                inlineData: {\n                    mimeType: image.type || \"image/jpeg\",\n                    data: await image.arrayBuffer().then((buffer)=>Buffer.from(buffer).toString(\"base64\"))\n                }\n            };\n            const prompt = \"Identify the object in the image and provide its name and other important information.\";\n            const result = await model.generateContent([\n                prompt,\n                imagePart\n            ]);\n            const response = await result.response;\n            const text = response.text();\n            setResults(text);\n        } catch (err) {\n            setError(\"Error identifying object: \" + err.message);\n        } finally{\n            setLoading(false);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen text-white flex flex-col\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                className: \"flex justify-between items-center p-4 bg-dark-gray bg-opacity-70 rounded-full shadow-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-2xl font-bold mr-2\",\n                            children: \"IO\"\n                        }, void 0, false, {\n                            fileName: \"/home/project/app/page.js\",\n                            lineNumber: 98,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 97,\n                        columnNumber: 13\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                            className: \"flex space-x-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                        href: \"#\",\n                                        className: \"hover:text-gray-300\",\n                                        children: \"About\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/project/app/page.js\",\n                                        lineNumber: 102,\n                                        columnNumber: 21\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.js\",\n                                    lineNumber: 102,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                        href: \"#\",\n                                        className: \"hover:text-gray-300\",\n                                        children: \"Contact\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/project/app/page.js\",\n                                        lineNumber: 103,\n                                        columnNumber: 21\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.js\",\n                                    lineNumber: 103,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.js\",\n                            lineNumber: 101,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 100,\n                        columnNumber: 13\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/project/app/page.js\",\n                lineNumber: 96,\n                columnNumber: 11\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col items-center justify-center p-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-6\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                type: \"file\",\n                                accept: \"image/*\",\n                                onChange: handleImageUpload,\n                                className: \"hidden\",\n                                id: \"image-upload\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 109,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"image-upload\",\n                                className: \"bg-light-blue hover:bg-dark-blue text-white font-bold py-2 px-4 rounded cursor-pointer\",\n                                children: \"Upload Image\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 110,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: handleCameraCapture,\n                                className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\",\n                                children: \"Capture Image\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 113,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 108,\n                        columnNumber: 13\n                    }, this),\n                    imageUrl && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mb-6\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                            src: imageUrl,\n                            alt: \"Uploaded or Captured\",\n                            className: \"max-w-xs max-h-60 rounded shadow-md\"\n                        }, void 0, false, {\n                            fileName: \"/home/project/app/page.js\",\n                            lineNumber: 119,\n                            columnNumber: 17\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 118,\n                        columnNumber: 15\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: identifyObject,\n                        disabled: loading,\n                        className: \"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed\",\n                        children: loading ? \"Identifying...\" : \"Identify Object\"\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 122,\n                        columnNumber: 13\n                    }, this),\n                    error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-red-500 mt-4\",\n                        children: error\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 125,\n                        columnNumber: 23\n                    }, this),\n                    results && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-6 p-4 rounded shadow-md max-w-md bg-opacity-80 backdrop-blur-sm bg-gray-800\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"overflow-x-auto\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                                className: \"w-full\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                                    children: results.split(\"\\n\").map((line, index)=>{\n                                        const [key, value] = line.split(\":\").map((str)=>str.trim());\n                                        if (!key || !value) return null;\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"font-bold pr-4 py-2 border-b border-gray-700 text-gray-200\",\n                                                    children: key\n                                                }, void 0, false, {\n                                                    fileName: \"/home/project/app/page.js\",\n                                                    lineNumber: 136,\n                                                    columnNumber: 29\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"py-2 border-b border-gray-700 text-gray-200\",\n                                                    children: value\n                                                }, void 0, false, {\n                                                    fileName: \"/home/project/app/page.js\",\n                                                    lineNumber: 137,\n                                                    columnNumber: 29\n                                                }, this)\n                                            ]\n                                        }, index, true, {\n                                            fileName: \"/home/project/app/page.js\",\n                                            lineNumber: 135,\n                                            columnNumber: 27\n                                        }, this);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.js\",\n                                    lineNumber: 130,\n                                    columnNumber: 21\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 129,\n                                columnNumber: 19\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/home/project/app/page.js\",\n                            lineNumber: 128,\n                            columnNumber: 17\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 127,\n                        columnNumber: 15\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-10 w-full max-w-6xl\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-2xl font-bold mb-4\",\n                                children: \"Examples\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 147,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n                                children: exampleResults.map((example, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-gray-700 bg-opacity-10 rounded-lg p-4 shadow-md\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: example.imageUrl,\n                                                alt: \"Example \".concat(index + 1),\n                                                className: \"w-full h-40 object-cover rounded-md mb-4\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/project/app/page.js\",\n                                                lineNumber: 151,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"overflow-x-auto\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                                                    className: \"w-full\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                                                        children: example.results.split(\"\\n\").map((line, index)=>{\n                                                            const [key, value] = line.split(\":\").map((str)=>str.trim());\n                                                            if (!key || !value) return null;\n                                                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                                        className: \"font-bold pr-4 py-2 border-b border-gray-700 text-gray-200\",\n                                                                        children: key\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/home/project/app/page.js\",\n                                                                        lineNumber: 160,\n                                                                        columnNumber: 33\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                                        className: \"py-2 border-b border-gray-700 text-gray-200\",\n                                                                        children: value\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/home/project/app/page.js\",\n                                                                        lineNumber: 161,\n                                                                        columnNumber: 33\n                                                                    }, this)\n                                                                ]\n                                                            }, index, true, {\n                                                                fileName: \"/home/project/app/page.js\",\n                                                                lineNumber: 159,\n                                                                columnNumber: 31\n                                                            }, this);\n                                                        })\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/project/app/page.js\",\n                                                        lineNumber: 154,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/project/app/page.js\",\n                                                    lineNumber: 153,\n                                                    columnNumber: 23\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/home/project/app/page.js\",\n                                                lineNumber: 152,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, index, true, {\n                                        fileName: \"/home/project/app/page.js\",\n                                        lineNumber: 150,\n                                        columnNumber: 19\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/home/project/app/page.js\",\n                                lineNumber: 148,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/project/app/page.js\",\n                        lineNumber: 146,\n                        columnNumber: 13\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/project/app/page.js\",\n                lineNumber: 107,\n                columnNumber: 11\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                className: \"flex justify-center items-center p-4 bg-dark-gray bg-opacity-70 rounded-full shadow-md mt-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-300\",\n                    children: [\n                        \"Credits: \",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            href: \"https://www.instagram.com/4fiq.x\",\n                            target: \"_blank\",\n                            rel: \"noopener noreferrer\",\n                            className: \"text-light-blue hover:underline\",\n                            children: \"4fiq.x\"\n                        }, void 0, false, {\n                            fileName: \"/home/project/app/page.js\",\n                            lineNumber: 175,\n                            columnNumber: 24\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/project/app/page.js\",\n                    lineNumber: 174,\n                    columnNumber: 13\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.js\",\n                lineNumber: 173,\n                columnNumber: 11\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/app/page.js\",\n        lineNumber: 95,\n        columnNumber: 9\n    }, this);\n}\n_s(Home, \"UY6sKmMEZJpcYRLQDtnXQ3XBuJg=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@google/generative-ai/dist/index.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockReason: function() { return /* binding */ BlockReason; },\n/* harmony export */   ChatSession: function() { return /* binding */ ChatSession; },\n/* harmony export */   FinishReason: function() { return /* binding */ FinishReason; },\n/* harmony export */   FunctionCallingMode: function() { return /* binding */ FunctionCallingMode; },\n/* harmony export */   FunctionDeclarationSchemaType: function() { return /* binding */ FunctionDeclarationSchemaType; },\n/* harmony export */   GenerativeModel: function() { return /* binding */ GenerativeModel; },\n/* harmony export */   GoogleGenerativeAI: function() { return /* binding */ GoogleGenerativeAI; },\n/* harmony export */   HarmBlockThreshold: function() { return /* binding */ HarmBlockThreshold; },\n/* harmony export */   HarmCategory: function() { return /* binding */ HarmCategory; },\n/* harmony export */   HarmProbability: function() { return /* binding */ HarmProbability; },\n/* harmony export */   POSSIBLE_ROLES: function() { return /* binding */ POSSIBLE_ROLES; },\n/* harmony export */   TaskType: function() { return /* binding */ TaskType; }\n/* harmony export */ });\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Possible roles.\n * @public\n */ const POSSIBLE_ROLES = [\n    \"user\",\n    \"model\",\n    \"function\",\n    \"system\"\n];\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */ var HarmCategory;\n(function(HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(HarmCategory || (HarmCategory = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */ var HarmBlockThreshold;\n(function(HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */ var HarmProbability;\n(function(HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */ var BlockReason;\n(function(BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})(BlockReason || (BlockReason = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */ var FinishReason;\n(function(FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})(FinishReason || (FinishReason = {}));\n/**\n * Task type for embedding content.\n * @public\n */ var TaskType;\n(function(TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})(TaskType || (TaskType = {}));\n/**\n * @public\n */ var FunctionCallingMode;\n(function(FunctionCallingMode) {\n    // Unspecified function calling mode. This value should not be used.\n    FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    // Default model behavior, model decides to predict either a function call\n    // or a natural language repspose.\n    FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n    // Model is constrained to always predicting a function call only.\n    // If \"allowed_function_names\" are set, the predicted function call will be\n    // limited to any one of \"allowed_function_names\", else the predicted\n    // function call will be any one of the provided \"function_declarations\".\n    FunctionCallingMode[\"ANY\"] = \"ANY\";\n    // Model will not predict any function call. Model behavior is same as when\n    // not passing any function declarations.\n    FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(FunctionCallingMode || (FunctionCallingMode = {}));\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */ var FunctionDeclarationSchemaType;\n(function(FunctionDeclarationSchemaType) {\n    /** String type. */ FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */ FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */ FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */ FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */ FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */ FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(FunctionDeclarationSchemaType || (FunctionDeclarationSchemaType = {}));\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class GoogleGenerativeAIError extends Error {\n    constructor(message){\n        super(\"[GoogleGenerativeAI Error]: \".concat(message));\n    }\n}\nclass GoogleGenerativeAIResponseError extends GoogleGenerativeAIError {\n    constructor(message, response){\n        super(message);\n        this.response = response;\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */ const PACKAGE_VERSION = \"0.6.0\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function(Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\nclass RequestUrl {\n    toString() {\n        var _a, _b;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let url = \"\".concat(baseUrl, \"/\").concat(apiVersion, \"/\").concat(this.model, \":\").concat(this.task);\n        if (this.stream) {\n            url += \"?alt=sse\";\n        }\n        return url;\n    }\n    constructor(model, task, apiKey, stream, requestOptions){\n        this.model = model;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.stream = stream;\n        this.requestOptions = requestOptions;\n    }\n}\n/**\n * Simple, but may become more complex if we add more versions to log.\n */ function getClientHeaders(requestOptions) {\n    const clientHeaders = [];\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        clientHeaders.push(requestOptions.apiClient);\n    }\n    clientHeaders.push(\"\".concat(PACKAGE_LOG_HEADER, \"/\").concat(PACKAGE_VERSION));\n    return clientHeaders.join(\" \");\n}\nasync function getHeaders(url) {\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"x-goog-api-client\", getClientHeaders(url.requestOptions));\n    headers.append(\"x-goog-api-key\", url.apiKey);\n    return headers;\n}\nasync function constructRequest(model, task, apiKey, stream, body, requestOptions) {\n    const url = new RequestUrl(model, task, apiKey, stream, requestOptions);\n    return {\n        url: url.toString(),\n        fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), {\n            method: \"POST\",\n            headers: await getHeaders(url),\n            body\n        })\n    };\n}\n/**\n * Wrapper for _makeRequestInternal that automatically uses native fetch,\n * allowing _makeRequestInternal to be tested with a mocked fetch function.\n */ async function makeRequest(model, task, apiKey, stream, body, requestOptions) {\n    return _makeRequestInternal(model, task, apiKey, stream, body, requestOptions, fetch);\n}\nasync function _makeRequestInternal(model, task, apiKey, stream, body, requestOptions) {\n    let // Allows this to be stubbed for tests\n    fetchFn = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : fetch;\n    const url = new RequestUrl(model, task, apiKey, stream, requestOptions);\n    let response;\n    try {\n        const request = await constructRequest(model, task, apiKey, stream, body, requestOptions);\n        response = await fetchFn(request.url, request.fetchOptions);\n        if (!response.ok) {\n            let message = \"\";\n            try {\n                const json = await response.json();\n                message = json.error.message;\n                if (json.error.details) {\n                    message += \" \".concat(JSON.stringify(json.error.details));\n                }\n            } catch (e) {\n            // ignored\n            }\n            throw new Error(\"[\".concat(response.status, \" \").concat(response.statusText, \"] \").concat(message));\n        }\n    } catch (e) {\n        const err = new GoogleGenerativeAIError(\"Error fetching from \".concat(url.toString(), \": \").concat(e.message));\n        err.stack = e.stack;\n        throw err;\n    }\n    return response;\n}\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */ function buildFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const abortController = new AbortController();\n        const signal = abortController.signal;\n        setTimeout(()=>abortController.abort(), requestOptions.timeout);\n        fetchOptions.signal = signal;\n    }\n    return fetchOptions;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */ function addHelpers(response) {\n    response.text = ()=>{\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(\"This response had \".concat(response.candidates.length, \" \") + \"candidates. Returning text from the first candidate only. \" + \"Access response.candidates directly to use the other candidates.\");\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(\"\".concat(formatBlockErrorMessage(response)), response);\n            }\n            return getText(response);\n        } else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(\"Text not available. \".concat(formatBlockErrorMessage(response)), response);\n        }\n        return \"\";\n    };\n    /**\n     * TODO: remove at next major version\n     */ response.functionCall = ()=>{\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(\"This response had \".concat(response.candidates.length, \" \") + \"candidates. Returning function calls from the first candidate only. \" + \"Access response.candidates directly to use the other candidates.\");\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(\"\".concat(formatBlockErrorMessage(response)), response);\n            }\n            console.warn(\"response.functionCall() is deprecated. \" + \"Use response.functionCalls() instead.\");\n            return getFunctionCalls(response)[0];\n        } else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(\"Function call not available. \".concat(formatBlockErrorMessage(response)), response);\n        }\n        return undefined;\n    };\n    response.functionCalls = ()=>{\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(\"This response had \".concat(response.candidates.length, \" \") + \"candidates. Returning function calls from the first candidate only. \" + \"Access response.candidates directly to use the other candidates.\");\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(\"\".concat(formatBlockErrorMessage(response)), response);\n            }\n            return getFunctionCalls(response);\n        } else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(\"Function call not available. \".concat(formatBlockErrorMessage(response)), response);\n        }\n        return undefined;\n    };\n    return response;\n}\n/**\n * Returns text of first candidate.\n */ function getText(response) {\n    var _a, _b, _c, _d;\n    if ((_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {\n        return response.candidates[0].content.parts.map((param)=>{\n            let { text } = param;\n            return text;\n        }).join(\"\");\n    } else {\n        return \"\";\n    }\n}\n/**\n * Returns functionCall of first candidate.\n */ function getFunctionCalls(response) {\n    var _a, _b, _c, _d;\n    const functionCalls = [];\n    if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts){\n            if (part.functionCall) {\n                functionCalls.push(part.functionCall);\n            }\n        }\n    }\n    if (functionCalls.length > 0) {\n        return functionCalls;\n    } else {\n        return undefined;\n    }\n}\nconst badFinishReasons = [\n    FinishReason.RECITATION,\n    FinishReason.SAFETY\n];\nfunction hadBadFinishReason(candidate) {\n    return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);\n}\nfunction formatBlockErrorMessage(response) {\n    var _a, _b, _c;\n    let message = \"\";\n    if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {\n        message += \"Response was blocked\";\n        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {\n            message += \" due to \".concat(response.promptFeedback.blockReason);\n        }\n        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {\n            message += \": \".concat(response.promptFeedback.blockReasonMessage);\n        }\n    } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n        const firstCandidate = response.candidates[0];\n        if (hadBadFinishReason(firstCandidate)) {\n            message += \"Candidate was blocked due to \".concat(firstCandidate.finishReason);\n            if (firstCandidate.finishMessage) {\n                message += \": \".concat(firstCandidate.finishMessage);\n            }\n        }\n    }\n    return message;\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */ function processStream(response) {\n    const inputStream = response.body.pipeThrough(new TextDecoderStream(\"utf8\", {\n        fatal: true\n    }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return {\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2)\n    };\n}\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    while(true){\n        const { done, value } = await reader.read();\n        if (done) {\n            return addHelpers(aggregateResponses(allResponses));\n        }\n        allResponses.push(value);\n    }\n}\nfunction generateResponseSequence(stream) {\n    return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n        const reader = stream.getReader();\n        while(true){\n            const { value, done } = yield __await(reader.read());\n            if (done) {\n                break;\n            }\n            yield yield __await(addHelpers(value));\n        }\n    });\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */ function getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start (controller) {\n            let currentText = \"\";\n            return pump();\n            function pump() {\n                return reader.read().then((param)=>{\n                    let { value, done } = param;\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new GoogleGenerativeAIError(\"Failed to parse stream\"));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while(match){\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        } catch (e) {\n                            controller.error(new GoogleGenerativeAIError('Error parsing JSON response: \"'.concat(match[1], '\"')));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        }\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */ function aggregateResponses(responses) {\n    const lastResponse = responses[responses.length - 1];\n    const aggregatedResponse = {\n        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback\n    };\n    for (const response of responses){\n        if (response.candidates) {\n            for (const candidate of response.candidates){\n                const i = candidate.index;\n                if (!aggregatedResponse.candidates) {\n                    aggregatedResponse.candidates = [];\n                }\n                if (!aggregatedResponse.candidates[i]) {\n                    aggregatedResponse.candidates[i] = {\n                        index: candidate.index\n                    };\n                }\n                // Keep overwriting, the last one will be final\n                aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;\n                aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n                aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;\n                aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;\n                /**\n                 * Candidates should always have content and parts, but this handles\n                 * possible malformed responses.\n                 */ if (candidate.content && candidate.content.parts) {\n                    if (!aggregatedResponse.candidates[i].content) {\n                        aggregatedResponse.candidates[i].content = {\n                            role: candidate.content.role || \"user\",\n                            parts: []\n                        };\n                    }\n                    const newPart = {};\n                    for (const part of candidate.content.parts){\n                        if (part.text) {\n                            newPart.text = part.text;\n                        }\n                        if (part.functionCall) {\n                            newPart.functionCall = part.functionCall;\n                        }\n                        if (Object.keys(newPart).length === 0) {\n                            newPart.text = \"\";\n                        }\n                        aggregatedResponse.candidates[i].content.parts.push(newPart);\n                    }\n                }\n            }\n        }\n    }\n    return aggregatedResponse;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function generateContentStream(apiKey, model, params, requestOptions) {\n    const response = await makeRequest(model, Task.STREAM_GENERATE_CONTENT, apiKey, /* stream */ true, JSON.stringify(params), requestOptions);\n    return processStream(response);\n}\nasync function generateContent(apiKey, model, params, requestOptions) {\n    const response = await makeRequest(model, Task.GENERATE_CONTENT, apiKey, /* stream */ false, JSON.stringify(params), requestOptions);\n    const responseJson = await response.json();\n    const enhancedResponse = addHelpers(responseJson);\n    return {\n        response: enhancedResponse\n    };\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function formatNewContent(request) {\n    let newParts = [];\n    if (typeof request === \"string\") {\n        newParts = [\n            {\n                text: request\n            }\n        ];\n    } else {\n        for (const partOrString of request){\n            if (typeof partOrString === \"string\") {\n                newParts.push({\n                    text: partOrString\n                });\n            } else {\n                newParts.push(partOrString);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */ function assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = {\n        role: \"user\",\n        parts: []\n    };\n    const functionContent = {\n        role: \"function\",\n        parts: []\n    };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts){\n        if (\"functionResponse\" in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        } else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.\");\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"No content is provided for sending chat message.\");\n    }\n    if (hasUserContent) {\n        return userContent;\n    }\n    return functionContent;\n}\nfunction formatGenerateContentInput(params) {\n    if (params.contents) {\n        return params;\n    } else {\n        const content = formatNewContent(params);\n        return {\n            contents: [\n                content\n            ]\n        };\n    }\n}\nfunction formatEmbedContentInput(params) {\n    if (typeof params === \"string\" || Array.isArray(params)) {\n        const content = formatNewContent(params);\n        return {\n            content\n        };\n    }\n    return params;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // https://ai.google.dev/api/rest/v1beta/Content#part\nconst VALID_PART_FIELDS = [\n    \"text\",\n    \"inlineData\",\n    \"functionCall\",\n    \"functionResponse\"\n];\nconst VALID_PARTS_PER_ROLE = {\n    user: [\n        \"text\",\n        \"inlineData\"\n    ],\n    function: [\n        \"functionResponse\"\n    ],\n    model: [\n        \"text\",\n        \"functionCall\"\n    ],\n    // System instructions shouldn't be in history anyway.\n    system: [\n        \"text\"\n    ]\n};\nconst VALID_PREVIOUS_CONTENT_ROLES = {\n    user: [\n        \"model\"\n    ],\n    function: [\n        \"model\"\n    ],\n    model: [\n        \"user\",\n        \"function\"\n    ],\n    // System instructions shouldn't be in history.\n    system: []\n};\nfunction validateChatHistory(history) {\n    let prevContent;\n    for (const currContent of history){\n        const { role, parts } = currContent;\n        if (!prevContent && role !== \"user\") {\n            throw new GoogleGenerativeAIError(\"First content should be with role 'user', got \".concat(role));\n        }\n        if (!POSSIBLE_ROLES.includes(role)) {\n            throw new GoogleGenerativeAIError(\"Each item should include role field. Got \".concat(role, \" but valid roles are: \").concat(JSON.stringify(POSSIBLE_ROLES)));\n        }\n        if (!Array.isArray(parts)) {\n            throw new GoogleGenerativeAIError(\"Content should have 'parts' property with an array of Parts\");\n        }\n        if (parts.length === 0) {\n            throw new GoogleGenerativeAIError(\"Each Content should have at least one part\");\n        }\n        const countFields = {\n            text: 0,\n            inlineData: 0,\n            functionCall: 0,\n            functionResponse: 0\n        };\n        for (const part of parts){\n            for (const key of VALID_PART_FIELDS){\n                if (key in part) {\n                    countFields[key] += 1;\n                }\n            }\n        }\n        const validParts = VALID_PARTS_PER_ROLE[role];\n        for (const key of VALID_PART_FIELDS){\n            if (!validParts.includes(key) && countFields[key] > 0) {\n                throw new GoogleGenerativeAIError(\"Content with role '\".concat(role, \"' can't contain '\").concat(key, \"' part\"));\n            }\n        }\n        if (prevContent) {\n            const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];\n            if (!validPreviousContentRoles.includes(prevContent.role)) {\n                throw new GoogleGenerativeAIError(\"Content with role '\".concat(role, \"' can't follow '\").concat(prevContent.role, \"'. Valid previous roles: \").concat(JSON.stringify(VALID_PREVIOUS_CONTENT_ROLES)));\n            }\n        }\n        prevContent = currContent;\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Do not log a message for this error.\n */ const SILENT_ERROR = \"SILENT_ERROR\";\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */ class ChatSession {\n    /**\n     * Gets the chat history so far. Blocked prompts are not added to history.\n     * Blocked candidates are not added to history, nor are the prompts that\n     * generated them.\n     */ async getHistory() {\n        await this._sendPromise;\n        return this._history;\n    }\n    /**\n     * Sends a chat message and receives a non-streaming\n     * {@link GenerateContentResult}\n     */ async sendMessage(request) {\n        var _a, _b, _c, _d, _e;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            contents: [\n                ...this._history,\n                newContent\n            ]\n        };\n        let finalResult;\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise.then(()=>generateContent(this._apiKey, this.model, generateContentRequest, this.requestOptions)).then((result)=>{\n            var _a;\n            if (result.response.candidates && result.response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({\n                    parts: [],\n                    // Response seems to come back without a role set.\n                    role: \"model\"\n                }, (_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content);\n                this._history.push(responseContent);\n            } else {\n                const blockErrorMessage = formatBlockErrorMessage(result.response);\n                if (blockErrorMessage) {\n                    console.warn(\"sendMessage() was unsuccessful. \".concat(blockErrorMessage, \". Inspect response object for details.\"));\n                }\n            }\n            finalResult = result;\n        });\n        await this._sendPromise;\n        return finalResult;\n    }\n    /**\n     * Sends a chat message and receives the response as a\n     * {@link GenerateContentStreamResult} containing an iterable stream\n     * and a response promise.\n     */ async sendMessageStream(request) {\n        var _a, _b, _c, _d, _e;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            contents: [\n                ...this._history,\n                newContent\n            ]\n        };\n        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, this.requestOptions);\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise.then(()=>streamPromise)// This must be handled to avoid unhandled rejection, but jump\n        // to the final catch block with a label to not log this error.\n        .catch((_ignored)=>{\n            throw new Error(SILENT_ERROR);\n        }).then((streamResult)=>streamResult.response).then((response)=>{\n            if (response.candidates && response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({}, response.candidates[0].content);\n                // Response seems to come back without a role set.\n                if (!responseContent.role) {\n                    responseContent.role = \"model\";\n                }\n                this._history.push(responseContent);\n            } else {\n                const blockErrorMessage = formatBlockErrorMessage(response);\n                if (blockErrorMessage) {\n                    console.warn(\"sendMessageStream() was unsuccessful. \".concat(blockErrorMessage, \". Inspect response object for details.\"));\n                }\n            }\n        }).catch((e)=>{\n            // Errors in streamPromise are already catchable by the user as\n            // streamPromise is returned.\n            // Avoid duplicating the error message in logs.\n            if (e.message !== SILENT_ERROR) {\n                // Users do not have access to _sendPromise to catch errors\n                // downstream from streamPromise, so they should not throw.\n                console.error(e);\n            }\n        });\n        return streamPromise;\n    }\n    constructor(apiKey, model, params, requestOptions){\n        this.model = model;\n        this.params = params;\n        this.requestOptions = requestOptions;\n        this._history = [];\n        this._sendPromise = Promise.resolve();\n        this._apiKey = apiKey;\n        if (params === null || params === void 0 ? void 0 : params.history) {\n            validateChatHistory(params.history);\n            this._history = params.history;\n        }\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function countTokens(apiKey, model, params, requestOptions) {\n    const response = await makeRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(Object.assign(Object.assign({}, params), {\n        model\n    })), requestOptions);\n    return response.json();\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function embedContent(apiKey, model, params, requestOptions) {\n    const response = await makeRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);\n    return response.json();\n}\nasync function batchEmbedContents(apiKey, model, params, requestOptions) {\n    const requestsWithModel = params.requests.map((request)=>{\n        return Object.assign(Object.assign({}, request), {\n            model\n        });\n    });\n    const response = await makeRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({\n        requests: requestsWithModel\n    }), requestOptions);\n    return response.json();\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Class for generative model APIs.\n * @public\n */ class GenerativeModel {\n    /**\n     * Makes a single non-streaming call to the model\n     * and returns an object containing a single {@link GenerateContentResponse}.\n     */ async generateContent(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return generateContent(this.apiKey, this.model, Object.assign({\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction\n        }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Makes a single streaming call to the model\n     * and returns an object containing an iterable stream that iterates\n     * over all chunks in the streaming response as well as\n     * a promise that returns the final aggregated response.\n     */ async generateContentStream(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return generateContentStream(this.apiKey, this.model, Object.assign({\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction\n        }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Gets a new {@link ChatSession} instance which can be used for\n     * multi-turn chats.\n     */ startChat(startChatParams) {\n        return new ChatSession(this.apiKey, this.model, Object.assign({\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction\n        }, startChatParams), this.requestOptions);\n    }\n    /**\n     * Counts the tokens in the provided request.\n     */ async countTokens(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return countTokens(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds the provided content.\n     */ async embedContent(request) {\n        const formattedParams = formatEmbedContentInput(request);\n        return embedContent(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds an array of {@link EmbedContentRequest}s.\n     */ async batchEmbedContents(batchEmbedContentRequest) {\n        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, this.requestOptions);\n    }\n    constructor(apiKey, modelParams, requestOptions){\n        this.apiKey = apiKey;\n        if (modelParams.model.includes(\"/\")) {\n            // Models may be named \"models/model-name\" or \"tunedModels/model-name\"\n            this.model = modelParams.model;\n        } else {\n            // If path is not included, assume it's a non-tuned model.\n            this.model = \"models/\".concat(modelParams.model);\n        }\n        this.generationConfig = modelParams.generationConfig || {};\n        this.safetySettings = modelParams.safetySettings || [];\n        this.tools = modelParams.tools;\n        this.toolConfig = modelParams.toolConfig;\n        this.systemInstruction = modelParams.systemInstruction;\n        this.requestOptions = requestOptions || {};\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Top-level class for this SDK\n * @public\n */ class GoogleGenerativeAI {\n    /**\n     * Gets a {@link GenerativeModel} instance for the provided model name.\n     */ getGenerativeModel(modelParams, requestOptions) {\n        if (!modelParams.model) {\n            throw new GoogleGenerativeAIError(\"Must provide a model name. \" + \"Example: genai.getGenerativeModel({ model: 'my-model-name' })\");\n        }\n        return new GenerativeModel(this.apiKey, modelParams, requestOptions);\n    }\n    constructor(apiKey){\n        this.apiKey = apiKey;\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\n"));

/***/ })

});